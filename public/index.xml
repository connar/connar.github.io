<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Journal of Connar</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Journal of Connar</description>
    <generator>Hugo -- 0.123.8</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Mar 2024 20:03:02 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Browser-in-the-Browser (BitB) attack</title>
      <link>http://localhost:1313/posts/bitb/</link>
      <pubDate>Mon, 11 Mar 2024 20:03:02 +0200</pubDate>
      <guid>http://localhost:1313/posts/bitb/</guid>
      <description>What is the Browser-in-the-Browser attack BitB attack is a phishing technique displayed by mr.d0x that essentially abuses the Single-Sign-On (SSO) window and modifies the shown url of the popped-up window to seem like a legitimate one.
Basically, the concept of this attack is to host a phishing website and inside the phishing website to create a legitimate looking SSO window (with a valid url) which is a phishing window as well.</description>
    </item>
    <item>
      <title>Exploring the BatchEncryption tool (and its deobfuscator) by gwsbhqt@163.com </title>
      <link>http://localhost:1313/posts/batchencryption/</link>
      <pubDate>Mon, 11 Mar 2024 20:03:02 +0200</pubDate>
      <guid>http://localhost:1313/posts/batchencryption/</guid>
      <description>What is the BatchEncryption tool The BatchEncryption tool is a tool used for obfuscating batch files. It is rather one of the most uncommon ones since it combines known and custom environment variable encodings to obfuscate the script. The way it works is it sets a randomly generated dictionary into a custom envar which is just a single quote (&amp;quot;&amp;rsquo;&amp;quot;). It then encodes it with existing environment variable substrings and then takes the remainder of the command using substrings of the custom environment variable declared previously.</description>
    </item>
    <item>
      <title>Exploring the Jlaive and UnJlaive tool</title>
      <link>http://localhost:1313/posts/jlaive/</link>
      <pubDate>Mon, 11 Mar 2024 20:03:02 +0200</pubDate>
      <guid>http://localhost:1313/posts/jlaive/</guid>
      <description>What will this post be about This post will be about the Jlaive and Get-UnJlaive tools. I will not go into depth as there are other resources I will list that do a great job explaining more in depth of the ins and outs of these tools. This will just be an overview of the tools: How to obfuscate an executable with Jlaive and how to recover it using Get-UnJlaive.</description>
    </item>
    <item>
      <title>Exploring the pCraft tool</title>
      <link>http://localhost:1313/posts/pcraft/</link>
      <pubDate>Mon, 11 Mar 2024 20:03:02 +0200</pubDate>
      <guid>http://localhost:1313/posts/pcraft/</guid>
      <description>What is the pCraft tool pCraft is a tool used to generate pcaps based on a scenario written in an ami file. The generated pcap file can then be used for the testing of rules etc.
Installation To install the tool, you can either clone it from its github repo:
https://github.com/DevoInc/pCraft or by using docker.
I had some issues when running the tool from the github repo (dependency errors with the pyami module), so I went with the docker option instead, which is what I will demonstrate.</description>
    </item>
    <item>
      <title>Setting up a phishing site [using blackeye tool]</title>
      <link>http://localhost:1313/posts/phishingsite/</link>
      <pubDate>Mon, 11 Mar 2024 20:03:02 +0200</pubDate>
      <guid>http://localhost:1313/posts/phishingsite/</guid>
      <description>Intro In this post we are going to see how to make a phishing website to then use for other attacks such as the Browser-in-the-Browser attack ( see: BitB ).
There are plenty of tools out there to quickly set up a phishing website. For example:
Socialphish Shell Phish Zphisher Blackeye and plenty others, but also platforms like gophish.
I just happened to be reading something about Blackeye tool, so we&amp;rsquo;ll go with this option.</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/ctfwriteups/weaklegacy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/weaklegacy/</guid>
      <description></description>
    </item>
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>about</description>
    </item>
    <item>
      <title>An email from aunt Chloe - Writeup</title>
      <link>http://localhost:1313/ctfwriteups/anemailfromauntchloe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/anemailfromauntchloe/</guid>
      <description>Starting the analysis In this challenge we are provided with a .rar file. We can extract the following files from this archive:
An image named “SantasVillage.png” A txt named “RecipeForClassicBreadStuffing.txt” If we pay attention to the txt file, we will notice that it is actually a vbs script. If we open it and view its contents we are met with the following code: What this script is doing is:
Open a website with recipe instructions.</description>
    </item>
    <item>
      <title>Mr Anderson - Writeup</title>
      <link>http://localhost:1313/ctfwriteups/mranderson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/mranderson/</guid>
      <description>This is a writeup for the babufscation challenge This challenge gives us a zip file containing 3 pcap files:
What we have to do is to first find the order of the scripts that were executed in the attack in order to know what was executed first, what other file it dropped etc.
We can easily identify the order by opening all 3 pcaps and observing the date and time of the first packet of each pcap.</description>
    </item>
    <item>
      <title>Mr Beast Xmas Giveaway - Writeup</title>
      <link>http://localhost:1313/ctfwriteups/xmasgiveaway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/xmasgiveaway/</guid>
      <description>Starting the analysis A pcap file is provided to the user. Pcap files are network capture files that provide an insight of what requests were made to what websites, the contents of each request and much more.
Opening the file with Wireshark, we can view all the requests.
The request that is of interest is the one made to themrbeas7.org and is the following:
GET /christmasGiveaway/index.html HTTP/1.1 Host: themrbeas7.org User-Agent: Mozilla/5.</description>
    </item>
    <item>
      <title>My Challenges</title>
      <link>http://localhost:1313/mychallenges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/mychallenges/</guid>
      <description>my challenges</description>
    </item>
    <item>
      <title>Projects</title>
      <link>http://localhost:1313/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/</guid>
      <description>projects</description>
    </item>
  </channel>
</rss>
