<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Forensics on Journal of Connar</title>
    <link>http://localhost:1313/categories/forensics/</link>
    <description>Recent content in Forensics on Journal of Connar</description>
    <generator>Hugo -- 0.147.2</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/categories/forensics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exploring scapy for blue and red team operations</title>
      <link>http://localhost:1313/posts/scapy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/scapy/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;In this post we will explore the scapy library in python and its features when it comes to analyzing pcap files. In general, scapy library can be used for both red team (sniffing traffic) and blue team operations (analyzing pcap files). We will stick to the second one for this post.&lt;/p&gt;
&lt;p&gt;I learned about scapy back when I started playing CTF challenges and was trying to solve a challenge where data had been exfiltrated through the ICMP protocol (we will see that challenge later). The idea in that challenge was that data was exfiltrated from the victim machine through ping requests - byte by byte. As you can tell, it was really difficult to manually reconstruct the exfiltrated data as this would mean copying and pasting the corresponding data from each packet. This is not really practical if you have a big pcap file.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
