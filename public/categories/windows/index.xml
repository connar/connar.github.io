<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Windows on Journal of Connar</title>
    <link>http://localhost:1313/categories/windows/</link>
    <description>Recent content in Windows on Journal of Connar</description>
    <generator>Hugo -- 0.123.8</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Jun 2024 20:03:02 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/windows/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Inside a PE file</title>
      <link>http://localhost:1313/posts/insideapefile/</link>
      <pubDate>Wed, 12 Jun 2024 20:03:02 +0200</pubDate>
      <guid>http://localhost:1313/posts/insideapefile/</guid>
      <description>Intro In this post we will observe the fields a Portable Executable file (PE or also known as Image) has, how are they connected to each other and how can they be utilized to load addresses of functions, names of functions and ordinals - amongst other fields - by writing a program that reads and loads these parts of an executable. The executable we will be disassecting will be mspaint.exe.</description>
    </item>
    <item>
      <title>API Hashing - Extensive breakdown</title>
      <link>http://localhost:1313/posts/apihashing/</link>
      <pubDate>Thu, 06 Jun 2024 20:03:02 +0200</pubDate>
      <guid>http://localhost:1313/posts/apihashing/</guid>
      <description>Intro As mentioned in the Exploring PEB struct and its fields post, we will now see how to to use a technique known as API Hashing. API hashing is a technique used in malware to identify API functions by their hash value from their names or other attributes. This hash value can then be used instead of the function names or other attributes to enumerate, rehash, compare and use functions based on the hash value.</description>
    </item>
    <item>
      <title>Exploring PEB struct and its fields</title>
      <link>http://localhost:1313/posts/peb/</link>
      <pubDate>Sat, 11 May 2024 20:03:02 +0200</pubDate>
      <guid>http://localhost:1313/posts/peb/</guid>
      <description>Intro This is the first post of the malware series that me and my friend @r4sti will be starting. We basically started learning malware concepts, dev and windows internals, and I will keep track of what we learn - like the rest of the things in this blog:)
Special thanks to him cause he is basically teaching me 70% of this stuff lol.
So in this post, we will dive into:</description>
    </item>
    <item>
      <title>Learning about Windows API</title>
      <link>http://localhost:1313/posts/windowsapi/</link>
      <pubDate>Mon, 11 Mar 2024 20:03:02 +0200</pubDate>
      <guid>http://localhost:1313/posts/windowsapi/</guid>
      <description>Intro As I am starting to take a turn of interest into malware analysis and development, I was required to understand what the Windows API really is. So this post is basically my notes on what windows api is and a few examples of it.
Was exactly is an API When you use a Windows application, have you ever wondered how it seamlessly interacts with the operating system? The magic behind this interaction is the Windows API.</description>
    </item>
  </channel>
</rss>
