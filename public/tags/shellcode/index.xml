<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Shellcode on Journal of Connar</title>
    <link>http://localhost:1313/tags/shellcode/</link>
    <description>Recent content in Shellcode on Journal of Connar</description>
    <generator>Hugo -- 0.134.3</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/tags/shellcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Obfuscating Shellcode in Datetime fields</title>
      <link>http://localhost:1313/posts/customshellcodeloader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/customshellcodeloader/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;After reading about various shellcode obfuscation techniques, such as &lt;code&gt;IPv4&lt;/code&gt; encoding (used in the Hive ransomware), &lt;code&gt;IPv6&lt;/code&gt; payload embedding, &lt;code&gt;MAC&lt;/code&gt; address encoding, and &lt;code&gt;UUID&lt;/code&gt;-based schemes - amongst others - I began asking myself a question: &lt;em&gt;what other valid-looking formats could be used to stealthily hide shellcode?&lt;/em&gt;&lt;br&gt;
Because most of these formats convert bytes directly to decimal or hexadecimal values and insert them into known structures. For instance, IPv4 offers minimal obfuscation beyond base conversion to decimal. IPv6 offers more space (as it can hide more bytes) but is often used in a straightforward way directly injecting the hex bytes, without meaningful transformation.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
